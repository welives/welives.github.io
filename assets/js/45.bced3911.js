(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{409:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"为什么说-javascript-中万物皆对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么说-javascript-中万物皆对象"}},[t._v("#")]),t._v(" 为什么说 Javascript 中万物皆对象")]),t._v(" "),a("p",[t._v("为了便于操作基本类型值，ECMAScript 提供了 3 个特殊的引用类型："),a("code",[t._v("Boolean")]),t._v("、"),a("code",[t._v("Number")]),t._v("和"),a("code",[t._v("String")]),t._v("(注意前面的是"),a("strong",[t._v("大写")]),t._v("的，"),a("code",[t._v("String")]),t._v(" 不是 "),a("code",[t._v("string")]),t._v(")。这些类型与引用类型相似，但同时也具有与各自的基本类型相应的特殊行为。实际上，每当读取一个基本类型值的时候，js 内部就会创建一个对应的基本包装类型的对象，从而让我们能够调用一些方法来操作这些数据。来看下面的例子")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'煎蛋'")]),t._v("\ntestString2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" testString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'蛋'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testString2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//煎蛋 1")]),t._v("\n")])])]),a("p",[t._v("testString 是一个字符串，属于基本数据类型。按照前面"),a("RouterLink",{attrs:{to:"/frontend/js-notes/数据类型初识.html"}},[t._v("数据类型初识")]),t._v("中的理解，字符串是基本的数据类型，在逻辑上将不应该有方法，但是上面的代码还是可以执行的，即在 Javascript 中万物皆对象")],1),t._v(" "),a("p",[a("strong",[t._v("下面解释为什么说 Javascript 中万物皆对象")])]),t._v(" "),a("p",[t._v("其实，为了让我们实现这种直观的操作，js 内部已经自动完成了一系列的处理，第一行的完整写法是")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'煎蛋'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("是生成一个"),a("code",[t._v("String")]),t._v("的实例，我们可以通过打印出来看一下")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("打开 chrome 的控制台，可以看到这样的结构")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("String\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"煎"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"蛋"')]),t._v("\nlength"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n__proto__"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("PrimitiveValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"煎蛋"')]),t._v("\n")])])]),a("p",[t._v('数字的第 0 位是"煎"，第 1 位是"蛋"，它的'),a("code",[t._v("length")]),t._v('是 2；它的默认值是"煎蛋"，它的原型'),a("code",[t._v("__proto__")]),t._v("是"),a("code",[t._v("String")]),t._v("这个类。在最开始的时候总结时，JS 中万物皆对象，"),a("code",[t._v("字符串类型(string)")]),t._v("是"),a("code",[t._v("字符串类(String)")]),t._v("的一员(实例)，是会继承字符串类的所有属性。就好比人属于人类的一员，人会继承人类的所有特征一样")]),t._v(" "),a("p",[t._v("点击"),a("code",[t._v("__proto__")]),t._v("，打开它的原型，查看它继承"),a("code",[t._v("String")]),t._v("的哪些方法，"),a("code",[t._v("String")]),t._v("的默认值是空字符串"),a("code",[t._v('""')])]),t._v(" "),a("p",[t._v("可以看到继承了"),a("code",[t._v("String")]),t._v("这个类的 N 多方法；其中就有"),a("code",[t._v("indexOf")]),t._v("这个方法")]),t._v(" "),a("p",[t._v("这个方法的原型，指向了"),a("code",[t._v("Function")]),t._v("的"),a("code",[t._v("prototype")]),t._v("(注意"),a("code",[t._v("constructor")]),t._v("这个属性，默认会指向"),a("code",[t._v("Function")]),t._v("本身)，再次打开"),a("code",[t._v("__proto__")]),t._v("，会打开继承的"),a("code",[t._v("Object")]),t._v("这个基类，之所以说是基类，是因为"),a("code",[t._v("Object.__proto__")]),t._v("是"),a("strong",[t._v("null")]),t._v("，已经到顶了")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'煎蛋'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'煎蛋'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'煎蛋'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n")])])]),a("p",[t._v("因为有原型的原因，所以可以使用"),a("code",[t._v("indexOf")]),t._v("方法，当然，也可以在"),a("code",[t._v("testString.__proto__")]),t._v("使用该方法，因为上面有"),a("code",[t._v("indexOf")]),t._v("这个方法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'煎蛋'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'煎'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'蛋'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(testString.__proto__.__proto__.indexOf('蛋')) // 报错, 因为Object类上没有indexOf这个方法")]),t._v("\n")])])]),a("p",[a("strong",[t._v("引用类型与基本类型的主要区别就是对象的生存期")]),t._v("。使用"),a("code",[t._v("new")]),t._v("操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。这意味着我们不能在运行时为基本类型值添加属性和方法。来看下面的例子")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'我是一个字符串'")]),t._v("\ntestStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'我的附加的一个颜色值'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'testStr.color的值是：'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//testStr.color的值是： undefined")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ntestObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'我的附加的一个颜色值'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'testObj.color的值是：'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//testObj.color的值是： 我的附加的一个颜色值")]),t._v("\n")])])]),a("p",[t._v("在此，第二行代码试图为字符串 testStr 添加一个 color 属性。但是，当第三行代码再次访问 testStr 时，其 color 属性不见了。问题的原因就是第二行创建的"),a("code",[t._v("String")]),t._v("对象在执行第三行代码时已经被销毁了。第三行代码又创建自己的"),a("code",[t._v("String")]),t._v("对象，而该对象没有 color 属性")]),t._v(" "),a("p",[a("code",[t._v("Object")]),t._v("构造函数也会像工厂方法一样，根据传入值的类型返回相应基本类型的实例")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some text'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),a("p",[t._v("把"),a("strong",[t._v("字符串")]),t._v("传给"),a("code",[t._v("Object")]),t._v("构造函数，就会创建"),a("code",[t._v("String")]),t._v("的实例，而传入"),a("strong",[t._v("数值")]),t._v("会得到"),a("code",[t._v("Number")]),t._v("的实例，传入"),a("strong",[t._v("布尔值")]),t._v("就会得到"),a("code",[t._v("Boolean")]),t._v("的实例")]),t._v(" "),a("blockquote",[a("p",[t._v("要注意的是，使用"),a("code",[t._v("new")]),t._v("调用基本类型的构造函数，与直接调用同名的转型函数是不一样的")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'25'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转型函数")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造函数")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object")]),t._v("\n")])])]),a("p",[t._v("在这个例子中，变量 number 中保存的是基本类型的值 25，而变量 obj 中保存的是"),a("code",[t._v("Number")]),t._v("的实例")]),t._v(" "),a("h2",{attrs:{id:"字符串的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的创建"}},[t._v("#")]),t._v(" 字符串的创建")]),t._v(" "),a("p",[a("strong",[t._v("字符串的 2 种创建方法")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" stringObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world one'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这个是字符串对象，不推荐这种写法, bad")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world two'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这个是基本的字符串值, 推荐这种写法, good，因为有原型链也可以访问到String的方法")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stringObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stringObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string 对象 15")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//hello word too 15")]),t._v("\n")])])]),a("p",[a("code",[t._v("String")]),t._v("类型的每个实例都有一个"),a("code",[t._v("length")]),t._v("属性，表示字符串中包含多个字符")]),t._v(" "),a("h2",{attrs:{id:"字符串的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的方法"}},[t._v("#")]),t._v(" 字符串的方法")]),t._v(" "),a("h4",{attrs:{id:"查找方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找方法"}},[t._v("#")]),t._v(" 查找方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("字符串方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("charAt(index)")]),t._v(" "),a("ul",[a("li",[t._v("功能：返回指定位置的字符")]),t._v(" "),a("li",[t._v("参数："),a("code",[t._v("index")]),t._v("是必须的，表示字符在字符串中的下标")]),t._v(" "),a("li",[t._v("注释：字符串中第一个字符的下标是 0。如果参数"),a("code",[t._v("index")]),t._v("不在 0 与"),a("code",[t._v("string.length")]),t._v("之间，该方法将返回一个空字符串")])])]),t._v(" "),a("li",[a("code",[t._v("charCodeAt(index)")]),t._v(" "),a("ul",[a("li",[t._v("功能：返回在指定的位置的字符的 Unicode 编码")]),t._v(" "),a("li",[t._v("参数："),a("code",[t._v("index")]),t._v("是必须的，表示字符在字符串中的下标")]),t._v(" "),a("li",[t._v("注释：字符串中第一个字符的下标是 0。如果"),a("code",[t._v("index")]),t._v("是负数，或大于等于字符串的长度，则"),a("code",[t._v("charCodeAt()")]),t._v("返回 NaN")])])]),t._v(" "),a("li",[a("code",[t._v("fromCharCode(Unicode,Unicode,Unicode)")]),t._v(" "),a("ul",[a("li",[t._v("功能：用 Unicode 编码创建一个字符串")]),t._v(" "),a("li",[t._v("参数：一个或多个 Unicode 值，即要创建的字符串中的字符的 Unicode 编码")]),t._v(" "),a("li",[t._v("注释：该方法是"),a("code",[t._v("String")]),t._v("的"),a("strong",[t._v("静态方法")]),t._v("，字符串中的每个字符都由单独的数字 Unicode 编码指定。它不能作为您已创建的"),a("code",[t._v("String")]),t._v("实例的方法来使用。因此它的语法应该是"),a("code",[t._v("String.fromCharCode()")]),t._v("，而不是 "),a("code",[t._v("myString.fromCharCode()")])])])]),t._v(" "),a("li",[t._v("三者的关系\n"),a("ul",[a("li",[a("code",[t._v("charAt")]),t._v("与"),a("code",[t._v("charCodeAt")]),t._v("共性：都是根据下标来查询字符，一个是查找实际的字符，一个是字符对应的 Unicode 值，有效范围"),a("code",[t._v("0 ~ length-1")])]),t._v(" "),a("li",[a("code",[t._v("charCodeAt")]),t._v("与"),a("code",[t._v("fromCharCode")]),t._v("互为反向操作；但是"),a("code",[t._v("charCodeAt")]),t._v("是查询，而"),a("code",[t._v("fromCharCode")]),t._v("是创建")])])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("位置方法(常用)")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("indexOf(searchValue，index)")]),t._v(" "),a("ul",[a("li",[t._v("功能：返回某个指定的字符串值在字符串中首次出现的位置")]),t._v(" "),a("li",[t._v("参数："),a("code",[t._v("searchValue")]),t._v("是必须的，规定需检索的字符串值；"),a("code",[t._v("index")]),t._v("是可选的整数参数。规定在字符串中从 "),a("code",[t._v("index")]),t._v("处向后检索。它的合法取值是"),a("code",[t._v("0 ~ length-1")]),t._v("。如省略该参数，则将从字符串的首字符开始检索")]),t._v(" "),a("li",[t._v("注释："),a("code",[t._v("indexOf()")]),t._v("方法对大小写敏感！如果要检索的字符串值没有出现，则该方法返回 "),a("strong",[t._v("-1")])])])]),t._v(" "),a("li",[a("code",[t._v("lastIndexOf(searchValue，index)")]),t._v(" "),a("ul",[a("li",[t._v("功能：返回一个指定的字符串值最后出现的位置，默认从字符串末尾向前检索。如果指定"),a("code",[t._v("index")]),t._v("，则从"),a("code",[t._v("index")]),t._v("位置处向前检索")]),t._v(" "),a("li",[t._v("参数："),a("code",[t._v("searchValue")]),t._v("是必须的，规定需检索的字符串值；"),a("code",[t._v("index")]),t._v("是可选的整数参数。规定在字符串中从 index 处向前检索。它的合法取值是"),a("code",[t._v("0 ~ length-1")]),t._v("。如省略该参数，则将从字符串的末尾开始检索")]),t._v(" "),a("li",[t._v("注释："),a("code",[t._v("lastIndexOf()")]),t._v("方法对大小写敏感！如果要检索的字符串值没有出现，则该方法返回 "),a("strong",[t._v("-1")])])])])])]),t._v(" "),a("li",[a("p",[t._v("匹配方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("search(regexp)")]),t._v(" "),a("ul",[a("li",[t._v("功能：用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串")]),t._v(" "),a("li",[t._v("参数："),a("code",[t._v("regexp")]),t._v("是必须的，可以是需要检索的子串，也可以是需要检索的"),a("code",[t._v("RegExp")]),t._v("对象。要执行忽略大小写的检索，请追加标志"),a("code",[t._v("i")])]),t._v(" "),a("li",[t._v("注释："),a("code",[t._v("search()")]),t._v("方法不执行全局匹配，它将忽略标志"),a("code",[t._v("g")]),t._v("。它同时忽略"),a("code",[t._v("regexp")]),t._v("的"),a("code",[t._v("lastIndex")]),t._v("属性，并且总是从字符串的首字符开始检索，这意味着它总是返回第一个匹配的位置。如果没有找到任何匹配的子串，则返回 "),a("strong",[t._v("-1")])])])]),t._v(" "),a("li",[a("code",[t._v("replace(regexp/substr,replacement)")]),t._v(" "),a("ul",[a("li",[t._v("功能：在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串")]),t._v(" "),a("li",[t._v("参数："),a("code",[t._v("regexp/substr")]),t._v("是必须的。规定子字符串或要替换的模式的"),a("code",[t._v("RegExp")]),t._v("对象。如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为"),a("code",[t._v("RegExp")]),t._v("对象。"),a("code",[t._v("replacement")]),t._v("必需的。一个字符串值。规定了替换文本或生成替换文本的函数")]),t._v(" "),a("li",[t._v("返回值：一个新的字符串，是用"),a("code",[t._v("replacement")]),t._v("替换了"),a("code",[t._v("regexp")]),t._v("的第一次匹配或所有匹配之后得到的")]),t._v(" "),a("li",[t._v("说明：字符串 stringObject 的"),a("code",[t._v("replace()")]),t._v("方法执行的是查找并替换的操作。它将在 stringObject 中查找与"),a("code",[t._v("regexp")]),t._v("相匹配的子字符串，然后用"),a("code",[t._v("replacement")]),t._v("来替换这些子串。如果"),a("code",[t._v("regexp")]),t._v("具有全局标志"),a("code",[t._v("g")]),t._v("，那么"),a("code",[t._v("replace()")]),t._v("方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。"),a("code",[t._v("replacement")]),t._v("可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 "),a("code",[t._v("replacement")]),t._v("中的"),a("code",[t._v("$")]),t._v("字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换\n"),a("table",[a("thead",[a("tr",[a("th",[t._v("字符")]),t._v(" "),a("th",[t._v("替换文本")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("$1、$2、...、$99")]),t._v(" "),a("td",[t._v("与 regexp 中的第 1 到第 99 个子表达式相匹配的文本")])]),t._v(" "),a("tr",[a("td",[t._v("$&")]),t._v(" "),a("td",[t._v("与 regexp 相匹配的子串")])]),t._v(" "),a("tr",[a("td",[t._v("$`")]),t._v(" "),a("td",[t._v("位于匹配子串左侧的文本")])]),t._v(" "),a("tr",[a("td",[t._v("$'")]),t._v(" "),a("td",[t._v("位于匹配子串右侧的文本")])]),t._v(" "),a("tr",[a("td",[t._v("$$")]),t._v(" "),a("td",[t._v("直接量符号")])])])])]),t._v(" "),a("li",[t._v("注意：ECMAScript v3 规定，"),a("code",[t._v("replace()")]),t._v("方法的参数"),a("code",[t._v("replacement")]),t._v("可以是函数而不是字符串。在这种情况下，每个匹配项都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是 stringObject 本身")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaa bbb ccc'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" strTarget "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\b\\w+\\b/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("word")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" word"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" word"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strTarget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Aaa Bbb Ccc")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("split(separator,howmany)")]),t._v(" "),a("ul",[a("li",[t._v("功能：把字符串分割为字符串数组")]),t._v(" "),a("li",[t._v("参数："),a("code",[t._v("separator")]),t._v("是必须的。可以是字符串或正则表达式，从该参数指定的地方分割 stringObject。"),a("code",[t._v("howmany")]),t._v("可选的。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度")]),t._v(" "),a("li",[t._v("返回值：一个字符串数组。该数组是通过在"),a("code",[t._v("separator")]),t._v("指定的边界处将字符串 stringObject 分割成子串创建的。返回的数组中的字串不包括"),a("code",[t._v("separator")]),t._v("自身。但是，如果"),a("code",[t._v("separator")]),t._v("是包含子表达式的正则表达式，那么返回的数组中包括与这些子表达式匹配的字串（但不包括与整个正则表达式匹配的文本）")]),t._v(" "),a("li",[t._v('注释：如果把空字符串 ("") 用作'),a("code",[t._v("separator")]),t._v("，那么 stringObject 中的每个字符之间都会被分割。"),a("code",[t._v("String.split()")]),t._v("执行的操作与"),a("code",[t._v("Array.join")]),t._v("执行的操作是相反的")])])])])])]),t._v(" "),a("h4",{attrs:{id:"操作方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作方法"}},[t._v("#")]),t._v(" 操作方法")]),t._v(" "),a("ul",[a("li",[t._v("拼接方法\n"),a("ul",[a("li",[a("code",[t._v("concat(stringX,stringX,...,stringX)")]),t._v(" "),a("ul",[a("li",[t._v("功能：连接两个或多个字符串")]),t._v(" "),a("li",[t._v("参数："),a("code",[t._v("stringX")]),t._v("是必须的。将被连接为一个字符串的一个或多个字符串对象")]),t._v(" "),a("li",[a("code",[t._v("concat()")]),t._v("方法将把它的所有参数转换成字符串，然后按顺序连接到字符串 stringObject 的尾部，并返回连接后的字符串。请注意，stringObject 本身并没有被更改。"),a("code",[t._v("stringObject.concat()")]),t._v("与"),a("code",[t._v("Array.concat()")]),t._v("很相似")]),t._v(" "),a("li",[t._v("提示：请注意，使用"),a("code",[t._v("+")]),t._v("运算符来进行字符串的连接运算通常会更简便一些")])])])])]),t._v(" "),a("li",[t._v("截取方法\n"),a("ul",[a("li",[t._v("根据下标截取子串\n"),a("ul",[a("li",[a("code",[t._v("slice(start,end)")]),t._v(" "),a("ul",[a("li",[t._v("功能：提取字符串的片断，并在新的字符串中返回被提取的部分")]),t._v(" "),a("li",[t._v("参数："),a("code",[t._v("start")]),t._v("要抽取的片断的起始下标。如果是负数，则该参数规定的是从字符串的末尾开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。"),a("code",[t._v("end")]),t._v("紧接着要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括"),a("code",[t._v("start")]),t._v("到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。")]),t._v(" "),a("li",[t._v("返回值：一个新的字符串。包括字符串 stringObject 从"),a("code",[t._v("start")]),t._v("开始（包括 start）到"),a("code",[t._v("end")]),t._v("结束（不包括 end）为止的所有字符")]),t._v(" "),a("li",[a("code",[t._v("String")]),t._v("对象的方法"),a("code",[t._v("slice()")]),t._v("、"),a("code",[t._v("substring()")]),t._v("和"),a("code",[t._v("substr()")]),t._v("（不建议使用）都可返回字符串的指定部分。"),a("code",[t._v("slice()")]),t._v("比"),a("code",[t._v("substring()")]),t._v("要灵活一些，因为它允许使用负数作为参数。"),a("code",[t._v("slice()")]),t._v("与"),a("code",[t._v("substr()")]),t._v("有所不同，因为它用两个字符的位置来指定子串，而"),a("code",[t._v("substr()")]),t._v("则用字符位置和长度来指定子串。还要注意的是，"),a("code",[t._v("String.slice()")]),t._v("与"),a("code",[t._v("Array.slice()")]),t._v("相似")])])]),t._v(" "),a("li",[a("code",[t._v("substring(start,stop)")]),t._v(" "),a("ul",[a("li",[t._v("功能：提取字符串中两个指定的索引号之间的字符")]),t._v(" "),a("li",[t._v("参数："),a("code",[t._v("start")]),t._v("是必须的。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。"),a("code",[t._v("stop")]),t._v("可选的。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾")]),t._v(" "),a("li",[t._v("返回值：一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从"),a("code",[t._v("start")]),t._v("处到 "),a("code",[t._v("stop-1")]),t._v("处的所有字符，其长度为"),a("code",[t._v("stop - start")])]),t._v(" "),a("li",[t._v("说明："),a("code",[t._v("substring()")]),t._v("方法返回的子串包括"),a("code",[t._v("start")]),t._v("处的字符，但不包括"),a("code",[t._v("stop")]),t._v("处的字符。如果参数"),a("code",[t._v("start")]),t._v(" 与"),a("code",[t._v("stop")]),t._v("相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。如果"),a("code",[t._v("start")]),t._v("比"),a("code",[t._v("stop")]),t._v("大，那么该方法在提取子串之前会先交换这两个参数")])])])])]),t._v(" "),a("li",[t._v("根据长度截取子串\n"),a("ul",[a("li",[a("code",[t._v("substr(start,length)")]),t._v(" "),a("ul",[a("li",[t._v("功能：在字符串中抽取从"),a("code",[t._v("start")]),t._v("下标开始的指定数目的字符")]),t._v(" "),a("li",[t._v("参数："),a("code",[t._v("start")]),t._v("是必须的。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的末尾开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。"),a("code",[t._v("length")]),t._v("可选的。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。")]),t._v(" "),a("li",[t._v("返回值：一个新的字符串，包含从 stringObject 的"),a("code",[t._v("start")]),t._v("（包括 start 所指的字符）处开始的"),a("code",[t._v("length")]),t._v("个字符。如果没有指定"),a("code",[t._v("length")]),t._v("，那么返回的字符串包含从"),a("code",[t._v("start")]),t._v("到 stringObject 的结尾的字符")]),t._v(" "),a("li",[t._v("注释："),a("code",[t._v("substr()")]),t._v("的参数指定的是子串的开始位置和长度，因此它可以替代"),a("code",[t._v("substring()")]),t._v("和"),a("code",[t._v("slice()")]),t._v("来使用")]),t._v(" "),a("li",[t._v("重要事项："),a("strong",[t._v("因为 ECMAscript 没有对该方法进行标准化，所以不推荐使用它")])])])])])]),t._v(" "),a("li",[a("code",[t._v("trim")]),t._v(": 清除字符串前后的空格")]),t._v(" "),a("li",[a("code",[t._v("trimLeft")]),t._v("：清除字符串的前置空格")]),t._v(" "),a("li",[a("code",[t._v("trimRight")]),t._v("：清除字符串的后缀空格")])])]),t._v(" "),a("li",[t._v("比较方法\n"),a("ul",[a("li",[a("code",[t._v("localCompare(target)")]),t._v(" "),a("ul",[a("li",[t._v("功能：用本地特质顺序比较两个字符串")]),t._v(" "),a("li",[t._v("参数：用元字符串进行比较的字符串")]),t._v(" "),a("li",[t._v("返回值：说明比较结果的数字\n"),a("ul",[a("li",[t._v("负数：元字符串<参数字符串")]),t._v(" "),a("li",[t._v("0：原字符串=参数字符串")]),t._v(" "),a("li",[t._v("正数：元字符串>参数字符串")])])])])])])])]),t._v(" "),a("h4",{attrs:{id:"编码方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码方法"}},[t._v("#")]),t._v(" 编码方法")]),t._v(" "),a("ul",[a("li",[t._v("字符串常规编码与解码\n"),a("ul",[a("li",[a("code",[t._v("escape()")])]),t._v(" "),a("li",[a("code",[t._v("unescape()")])])])]),t._v(" "),a("li",[t._v("URI 字符串编码与解码\n"),a("ul",[a("li",[a("code",[t._v("encodeURI")])]),t._v(" "),a("li",[a("code",[t._v("decodeURI")])])])]),t._v(" "),a("li",[t._v("URI 组件编码与解码\n"),a("ul",[a("li",[a("code",[t._v("encodeURIComponent()")])]),t._v(" "),a("li",[a("code",[t._v("decodeURIComponent()")])])])])]),t._v(" "),a("h4",{attrs:{id:"转换方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换方法"}},[t._v("#")]),t._v(" 转换方法")]),t._v(" "),a("ul",[a("li",[t._v("大小写转换\n"),a("ul",[a("li",[t._v("转为大写\n"),a("ul",[a("li",[a("code",[t._v("toUpperCase()")])]),t._v(" "),a("li",[a("code",[t._v("toLocaleUpperCase()")])])])]),t._v(" "),a("li",[t._v("转为小写\n"),a("ul",[a("li",[a("code",[t._v("toLowerCase()")])]),t._v(" "),a("li",[a("code",[t._v("toLocaleLowerCase()")])])])])])]),t._v(" "),a("li",[t._v("代码转换\n"),a("ul",[a("li",[t._v("用 JS 动态格式化 HTML，不具语义性，舍弃")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);