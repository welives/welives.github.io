(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{412:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("表达式、运算符是程序的基础，最简单的 "),a("code",[t._v('var myName="jandan"')])]),t._v(" "),a("p",[t._v("这个就是一个表达式，把等号右边的字符串，赋值到左边 myName 这个变量名上。表达式在各个类型里会介绍，这里主要总结运算符")]),t._v(" "),a("p",[t._v("大多数的运算符是有"),a("code",[t._v("+")]),t._v("、 "),a("code",[t._v("-")]),t._v(" 、"),a("code",[t._v("==")]),t._v("这种标识符号来表现，但是也有一些运算符是由关键字表示的，比如"),a("code",[t._v("delete")]),t._v("和"),a("code",[t._v("instanceof")]),t._v("，不过无论标识符号表示的运算符还是关键字表示的运算符，都是合法的运算符")]),t._v(" "),a("h1",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),a("p",[t._v("类似生活中的，加减乘除，是对程序的操作。但是需要注意的是，数学里面的加减乘数等都是对数字而言的，但是在 JS 里这些都是可以对不同的数据进行操作的，当然这些也是包括数字类型的")]),t._v(" "),a("p",[t._v("ECMAScript 里用于操作数据值的运算符也叫操作符，只是叫法不同，包括算术运算符，位运算，关系运算，相等运算，这些都是可以针对不同类型的值的（比如字符串，数值，布尔，对象）")]),t._v(" "),a("p",[t._v("需要牢记一点：应用对象的时候，运算符通常会调用对象上的"),a("code",[t._v("valueOf")]),t._v("或者"),a("code",[t._v("toString")]),t._v("方法，转成字符串后再次进行操作")]),t._v(" "),a("p",[t._v("需要注意一点："),a("strong",[t._v("NaN 和任何数操作，结果都返回 NaN")])]),t._v(" "),a("h2",{attrs:{id:"算术运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[t._v("#")]),t._v(" 算术运算符")]),t._v(" "),a("p",[t._v("算术运算符包括："),a("code",[t._v("+")]),t._v("、"),a("code",[t._v("-")]),t._v("、"),a("code",[t._v("*")]),t._v("、"),a("code",[t._v("/")]),t._v("、"),a("code",[t._v("%")])]),t._v(" "),a("p",[t._v("复合赋值运算符："),a("code",[t._v("+=")]),t._v("、"),a("code",[t._v("-=")]),t._v("、"),a("code",[t._v("*=")]),t._v("、"),a("code",[t._v("/=")]),t._v("、"),a("code",[t._v("%=")])]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("+")]),t._v("（加号）")]),t._v(" "),a("ul",[a("li",[t._v("功能：\n"),a("ol",[a("li",[t._v("对数字进行代数求和")]),t._v(" "),a("li",[t._v("对字符串进行连接操作")]),t._v(" "),a("li",[t._v("将一个数值转换成字符串")])])]),t._v(" "),a("li",[t._v("字符串拼接：\n"),a("ul",[a("li",[t._v("字符串+字符串：两者直接拼接")]),t._v(" "),a("li",[t._v("字符串+数值：数值转为字符串再拼接")]),t._v(" "),a("li",[t._v("如果有一个操作数是对象、数值或布尔值，则调用它们的"),a("code",[t._v("toString()")]),t._v("方法取得相应的字符串值，然后再应用前面关于字符串的规则")])])])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" strEmpty "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("222")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" targetData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" strEmpty "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" testNum\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" testNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" targetData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多次运算")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testOne "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'字符串'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testOne "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串25")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testOne "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串7")]),t._v("\n")])])]),a("p",[t._v("如果数值和字符串一起混合运算，数值类型的用"),a("code",[t._v("()")]),t._v("包裹，提高优先级，否则是字符串+2，计算的结果再+5")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("-")]),t._v("（减号）")]),t._v(" "),a("ul",[a("li",[t._v("功能：\n"),a("ul",[a("li",[t._v("操作数是"),a("code",[t._v("Number")]),t._v("类型时，进行取绝对值操作")]),t._v(" "),a("li",[t._v("对数字进行减法操作")]),t._v(" "),a("li",[t._v("将字符串转换成数值，数值型字符串转换成对应数字，否则转换成"),a("code",[t._v("NaN")])])])])])])]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("*")]),t._v("和"),a("code",[t._v("/")]),t._v("（乘除）")]),t._v(" "),a("ul",[a("li",[t._v("功能：对两个运算数进行乘法（除法）运算")]),t._v(" "),a("li",[t._v("符号问题：同号得正，异号得负")]),t._v(" "),a("li",[t._v("如果有一个操作数不是数值，则在后台调用"),a("code",[t._v("Number()")]),t._v("将其转换为数值，然后再应用上面的规则")]),t._v(" "),a("li",[t._v("如果有一个操作数是"),a("code",[t._v("NaN")]),t._v("，则结果是"),a("code",[t._v("NaN")])])])])]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("%")]),t._v("（求余/求模）")]),t._v(" "),a("ul",[a("li",[t._v("功能：返回两个除数的余数")]),t._v(" "),a("li",[t._v("符号问题：和第一个运算数的符号相同")]),t._v(" "),a("li",[t._v("如果被除数是零，则结果是零")]),t._v(" "),a("li",[t._v("如果有一个操作数不是数值，则在后台调用"),a("code",[t._v("Number()")]),t._v("将其转换为数值，然后再应用上面的规则")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" times "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123453")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//求多少分，多少秒；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" targetTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'分'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'秒'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"操作数类型和结果类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作数类型和结果类型"}},[t._v("#")]),t._v(" 操作数类型和结果类型")]),t._v(" "),a("p",[t._v("运算符通常会根据需要对操作数进行类型转换；比如"),a("code",[t._v("*")]),t._v(" "),a("code",[t._v("/")]),t._v("的时候，可以把字符串转为数值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'5'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//53")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'5'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'5'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//15")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'15'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5")]),t._v("\n")])])]),a("h4",{attrs:{id:"赋值操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值操作符"}},[t._v("#")]),t._v(" 赋值操作符")]),t._v(" "),a("p",[a("code",[t._v("=")]),t._v("：赋值 "),a("code",[t._v("var a = 10")])]),t._v(" "),a("p",[a("code",[t._v("+=")]),t._v("：加赋值 "),a("code",[t._v("x += y 等价于 x = x+y")])]),t._v(" "),a("p",[a("code",[t._v("-=")]),t._v("：减赋值 "),a("code",[t._v("x -= y 等价于 x = x-y")])]),t._v(" "),a("p",[a("code",[t._v("*=")]),t._v("：乘赋值 "),a("code",[t._v("x *= y 等价于 x = x*y")])]),t._v(" "),a("p",[a("code",[t._v("/=")]),t._v("：除赋值 "),a("code",[t._v("x /= y 等价于 x = x/y")])]),t._v(" "),a("p",[a("code",[t._v("%=")]),t._v("：取余赋值 "),a("code",[t._v("x %= y 等价于 x = x%y")])]),t._v(" "),a("h2",{attrs:{id:"自增与自减"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自增与自减"}},[t._v("#")]),t._v(" 自增与自减")]),t._v(" "),a("p",[t._v("注意："),a("code",[t._v("++i")]),t._v(" 和 "),a("code",[t._v("i++")]),t._v("是完全两回事（递增和递减操作符直接借鉴自 C，而且各有两个版本："),a("strong",[t._v("前置型和后置型")]),t._v("）")]),t._v(" "),a("ul",[a("li",[t._v("功能相反\n"),a("ul",[a("li",[a("code",[t._v("++")]),t._v(" 对唯一的运算数进行递增操作(每次加 1)")]),t._v(" "),a("li",[a("code",[t._v("--")]),t._v(" 对唯一的运算数进行递减操作(每次减 1)")])])]),t._v(" "),a("li",[t._v("规则相同\n"),a("ul",[a("li",[t._v("运算数必须是一个变量，数组的一个元素或者对象的属性")]),t._v(" "),a("li",[t._v("如果运算数是非数值的则运算符将它转成数值（可用于字符串，布尔值，浮点数值和对象）")]),t._v(" "),a("li",[t._v("转换规则是，调用"),a("code",[t._v("Number")]),t._v("，根据转后的值，再次进行运算")])])]),t._v(" "),a("li",[t._v("符号位置决定运算结果\n"),a("ul",[a("li",[a("strong",[t._v("运算数之前，先进行递增/递减 操作，再进行求值")])]),t._v(" "),a("li",[a("strong",[t._v("运算数之后，先求值，再进行递增/递减 操作")])])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  num3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  num5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  num6 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("num3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  num7 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num2\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 22, 21")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 31, 31")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nnum"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\nnum"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])])]),a("h2",{attrs:{id:"关系运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符"}},[t._v("#")]),t._v(" 关系运算符")]),t._v(" "),a("h3",{attrs:{id:"大小关系检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大小关系检测"}},[t._v("#")]),t._v(" 大小关系检测")]),t._v(" "),a("p",[a("strong",[t._v("运算符")])]),t._v(" "),a("ul",[a("li",[t._v("<\n"),a("ul",[a("li",[t._v("如果 A 小于 B，则返回 true，否则返回值为 false")])])]),t._v(" "),a("li",[t._v("<=\n"),a("ul",[a("li",[t._v("如果 A 小于等于 B，则返回值为 true，否则返回 false")])])]),t._v(" "),a("li",[t._v(">=\n"),a("ul",[a("li",[t._v("如果 A 大于等于 B,返回 true，否则返回值为 false")])])]),t._v(" "),a("li",[t._v(">\n"),a("ul",[a("li",[t._v("如果 A 大于 B，则返回 true，否则返回值为 false")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//关系操作符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'下面是关系操作符'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[a("strong",[t._v("操作规则")])]),t._v(" "),a("ul",[a("li",[t._v("数值与数值的比较，比较他们的代数值")]),t._v(" "),a("li",[t._v("仅一个运算数是数值，将另一个运算数转换成数值，并比较他们的代数值")]),t._v(" "),a("li",[t._v("字符串间的比较，逐字符比较他们的 Unicode 数值")]),t._v(" "),a("li",[t._v("如果一个操作数是数值，则将另一个操作数转换为一个数值，然后执行数值比较(只要有一个是数值，另外一个无论什么值，都会最终转为数值后再比较)")]),t._v(" "),a("li",[t._v("运算数既非数字也非字符串，返回值为 false")]),t._v(" "),a("li",[t._v("与"),a("code",[t._v("NaN")]),t._v("比较，返回值是 false")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'20'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'100000'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),a("p",[a("strong",[t._v("注意")]),t._v("：做关系比较的时候，一定要把值全部转为数值，这是一个很好的习惯，一定要避免 2 个字符串在一起比较大小")]),t._v(" "),a("h3",{attrs:{id:"等值关系检测-和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#等值关系检测-和"}},[t._v("#")]),t._v(" 等值关系检测 "),a("code",[t._v("==")]),t._v(" 和 "),a("code",[t._v("===")])]),t._v(" "),a("p",[a("strong",[t._v("相等比较")])]),t._v(" "),a("ul",[a("li",[t._v("操作符\n"),a("ul",[a("li",[a("code",[t._v("==")]),t._v(" 比较两个运算数的返回值看是否相等（和正常生活中的=一定要区分开）")]),t._v(" "),a("li",[a("code",[t._v("!=")]),t._v(" 比较两个运算数的返回值看是否不相等")])])]),t._v(" "),a("li",[t._v("类型转换\n"),a("ul",[a("li",[t._v("布尔值\n"),a("ul",[a("li",[t._v("true 1")]),t._v(" "),a("li",[t._v("false 0")])])]),t._v(" "),a("li",[t._v("对象，调用"),a("code",[t._v("valueOf()")]),t._v("转换成字符串")]),t._v(" "),a("li",[t._v("字符串与数值的比较，字符串转换为数值")])])]),t._v(" "),a("li",[t._v("比较原则\n"),a("ul",[a("li",[a("code",[t._v("null")]),t._v("与"),a("code",[t._v("undefined")]),t._v("：相等，比较前不做任何转换")]),t._v(" "),a("li",[a("code",[t._v("NaN")]),t._v("：与任何数值都不想等，包括其自身")]),t._v(" "),a("li",[t._v("对象，是否属于同一个对象\n"),a("ul",[a("li",[t._v("是 "),a("code",[t._v("==")])]),t._v(" "),a("li",[t._v("否 "),a("code",[t._v("!=")])])])])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'下面是关系操作符'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("简单分析一下")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转换分析1")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jandan'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true,因为非空的字符串是一个真值；")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转换分析2")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jandan'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这个时候输出什么呢？在分析一里非空字符串是一个true，那么非空字符串==true吗？")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转换分析3")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jandan'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果上面的的返回不是true，那么这个会返回true吗？")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下面的分析的步骤；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n * 转换分析2-解析\n * 1、右边的布尔值会转为数字,true->1\n * 2、左边的字符串会转为数字，"jandan"因为里面有字母，所以转换为NaN\n * 3、NaN和任何数据都不想等，包括自己，所以结果是false，并不是true；\n */')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n * 转换分析3-解析\n * 1、右边的布尔值会转为数字,false->0\n * 2、左边的字符串会转为数字，"jandan"因为里面有字母，所以转换为NaN\n * 3、NaN和任何数据都不想等，包括自己，所以结果是false，结果也不是true\n */')]),t._v("\n")])])]),a("p",[a("strong",[t._v("全等比较")])]),t._v(" "),a("ul",[a("li",[t._v("运算符\n"),a("ul",[a("li",[a("code",[t._v("===")]),t._v(" 比较两个运算数的返回值以及数据类型是否相同")]),t._v(" "),a("li",[a("code",[t._v("!==")]),t._v(" 比较两个运算数的返回值以及数据类型是否不相同")])])]),t._v(" "),a("li",[t._v("比较原则\n"),a("ul",[a("li",[t._v("值类型间比较，只有数据类型相同，且数值相等时才能够相同")]),t._v(" "),a("li",[t._v("值类型与引用类型比较，肯定不相同")]),t._v(" "),a("li",[t._v("引用类型间的比较，比较他们的引用值（内存地址）")])])])]),t._v(" "),a("p",[t._v("简单的说，就是 x 和 y 比较，如果两者的类型不同，那就没有比较的意义了，直接返回 false")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jandan'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jandan'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jandan'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jandan'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jandan'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" person2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false, 是不同的引用地址；在堆内存中储存是不一样的；")]),t._v("\n")])])]),a("h2",{attrs:{id:"对象运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象运算符"}},[t._v("#")]),t._v(" 对象运算符")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("in")]),t._v("：判断左侧运算数是否为右侧运算数的成员")]),t._v(" "),a("li",[a("strong",[t._v("instancesof")]),t._v("：判断对相爱呢个实例是否属于某个类或构造函数")]),t._v(" "),a("li",[a("strong",[t._v("new")]),t._v("：根据构造函数创建一个新的对象，并初始化该对象")]),t._v(" "),a("li",[a("strong",[t._v("delete")]),t._v("：删除指定对象的属性，数组元素或变量\n"),a("ul",[a("li",[t._v("可以删除对象里的属性")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaaa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" myObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 输出对象{name: "aaaa"}')]),t._v("\n")])])])]),t._v(" "),a("li",[a("code",[t._v(".")]),t._v("及"),a("code",[t._v("[]")]),t._v("：存取对象和数组元素")]),t._v(" "),a("li",[a("code",[t._v("()")]),t._v("：函数调用，改变运算符优先级等")])]),t._v(" "),a("h2",{attrs:{id:"逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),a("h3",{attrs:{id:"逻辑非-返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑非-返回值"}},[t._v("#")]),t._v(" "),a("code",[t._v("!")]),t._v("逻辑非：返回值")]),t._v(" "),a("p",[t._v('在 JavaScript 中，true 和 false 有些复杂。在大多数编程语言中，布尔值 true 和 false 仅仅表示 true/false。而在 JavaScript 中，如"ssss"这样的字符串值，也可以看作 true')]),t._v(" "),a("ul",[a("li",[t._v("返回值\n"),a("ul",[a("li",[t._v("true(表达式或值计算为 false 的，都可以转为 true)\n"),a("ul",[a("li",[t._v("空字符串")]),t._v(" "),a("li",[t._v("0")]),t._v(" "),a("li",[t._v("-0")]),t._v(" "),a("li",[t._v("NaN")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("false")])])]),t._v(" "),a("li",[t._v("false(表达式或值计算为 true 的，都可以转为 false)\n"),a("ul",[a("li",[t._v("对象")]),t._v(" "),a("li",[t._v("非空字符串")]),t._v(" "),a("li",[t._v("非 0 数值(Infinity)")])])])])]),t._v(" "),a("li",[t._v("特性\n"),a("ul",[a("li",[t._v("如果运算数的值为 false 则返回 true，否则返回 false")]),t._v(" "),a("li",[t._v("连续使用两次，可将任意类型转为布尔类型值（"),a("code",[t._v("!!")]),t._v("相当于"),a("code",[t._v("Boolean()")]),t._v("）")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),a("h3",{attrs:{id:"逻辑与"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑与"}},[t._v("#")]),t._v(" "),a("code",[t._v("&&")]),t._v("逻辑与")]),t._v(" "),a("ul",[a("li",[t._v("规则\n"),a("ul",[a("li",[t._v("只有第一个值是"),a("code",[t._v("true")]),t._v("的时候，才会返回第二个值；第一个值为"),a("code",[t._v("false")]),t._v("，则返回第一个值。"),a("code",[t._v("&&")]),t._v("是必须两个都为"),a("code",[t._v("true")]),t._v("才为"),a("code",[t._v("true")]),t._v("的，看取决于哪个值的\n"),a("ul",[a("li",[t._v("第一个操作数的对象，返回第二个操作数（第一个为"),a("code",[t._v("true")]),t._v("了，关键取决于第二个值，所以返回第二个）")]),t._v(" "),a("li",[t._v("第二个操作数是对象，如果想返回第二个对象，第一个必须为"),a("code",[t._v("true")])]),t._v(" "),a("li",[t._v("如果两个操作数都是对象，第一个是"),a("code",[t._v("true")]),t._v("，则返回第二个操作数")]),t._v(" "),a("li",[t._v("第一个操作数是"),a("code",[t._v("null")]),t._v("，返回"),a("code",[t._v("null")]),t._v("（第一个"),a("code",[t._v("null")]),t._v("已经是"),a("code",[t._v("false")]),t._v("了，后面第二个值无论是"),a("code",[t._v("true")]),t._v("还是"),a("code",[t._v("false")]),t._v("已经不重要了，所以返回的是第一个值）")]),t._v(" "),a("li",[t._v("第一个操作数是"),a("code",[t._v("undefined")]),t._v("，返回"),a("code",[t._v("undefined")]),t._v("（原理同上）")]),t._v(" "),a("li",[t._v("第一个操作数是"),a("code",[t._v("NaN")]),t._v("，返回"),a("code",[t._v("NaN")]),t._v("（原理同上）")])])])])]),t._v(" "),a("li",[t._v("特性\n"),a("ul",[a("li",[t._v("当且仅当两个操作数的值都是"),a("code",[t._v("true")]),t._v("时，才返回"),a("code",[t._v("true")]),t._v("，否则返回"),a("code",[t._v("false")]),t._v("(做 if 判断的时候)")]),t._v(" "),a("li",[t._v("短路操作，当第一个操作数的值是"),a("code",[t._v("false")]),t._v("，则不再对第二个操作数进行求值（做变量赋值的时候）")])])])]),t._v(" "),a("h3",{attrs:{id:"逻辑或"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑或"}},[t._v("#")]),t._v(" "),a("code",[t._v("||")]),t._v("逻辑或")]),t._v(" "),a("ul",[a("li",[t._v("规则\n"),a("ul",[a("li",[t._v("两个操作数都是"),a("code",[t._v("false")]),t._v("的时候才为"),a("code",[t._v("false")]),t._v("。第一个操作数是"),a("code",[t._v("true")]),t._v("，则返回第一个数，无需对第二个值判断了，已经可以确定为"),a("code",[t._v("true")]),t._v("。如果第一个值为"),a("code",[t._v("false")]),t._v("的时候，返回第二个数，因为第一个已经是"),a("code",[t._v("false")]),t._v("了，值取决于第二个值，所以返回第二个值")]),t._v(" "),a("li",[t._v("第一个操作数是对象，返回第一个操作数")]),t._v(" "),a("li",[t._v("第一个操作数值为"),a("code",[t._v("false")]),t._v("，返回第二个操作数")]),t._v(" "),a("li",[t._v("两个操作数都是对象，返回第一个操作数")]),t._v(" "),a("li",[t._v("两个操作数都是"),a("code",[t._v("null")]),t._v("，返回"),a("code",[t._v("null")])]),t._v(" "),a("li",[t._v("两个操作数都是"),a("code",[t._v("undefined")]),t._v("，返回"),a("code",[t._v("undefined")])]),t._v(" "),a("li",[t._v("两个操作数都是"),a("code",[t._v("NaN")]),t._v("，返回"),a("code",[t._v("NaN")])])])]),t._v(" "),a("li",[t._v("特性\n"),a("ul",[a("li",[t._v("当且仅当两个操作数的值都是"),a("code",[t._v("false")]),t._v("时，才会返回"),a("code",[t._v("false")]),t._v("，否则返回"),a("code",[t._v("true")])]),t._v(" "),a("li",[t._v("如果第一个操作数值为"),a("code",[t._v("true")]),t._v("，则不会对第二个操作数进行求值")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b有值'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a的值是假的'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  result2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b的值是假的'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a的值是假的")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b有值")]),t._v("\n")])])]),a("h2",{attrs:{id:"位运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[t._v("#")]),t._v(" 位运算符")]),t._v(" "),a("p",[a("strong",[t._v("仅作了解，可以忽略不看，项目中很少用到")])]),t._v(" "),a("ul",[a("li",[t._v("基础知识\n"),a("ul",[a("li",[t._v("类型\n"),a("ul",[a("li",[t._v("有符号\n"),a("ul",[a("li",[t._v("数值位，前 31 位")]),t._v(" "),a("li",[t._v("符号位，第 32 位\n"),a("ul",[a("li",[t._v("0，整数")]),t._v(" "),a("li",[t._v("1，负数")])])])])]),t._v(" "),a("li",[t._v("无符号\n"),a("ul",[a("li",[t._v("只能是正数")]),t._v(" "),a("li",[t._v("第 32 位表示数值")]),t._v(" "),a("li",[t._v("数值范围可以加大")])])])])]),t._v(" "),a("li",[t._v("数值范围：-2147483648~2147483647")]),t._v(" "),a("li",[t._v("存储方式\n"),a("ul",[a("li",[t._v("正数\n"),a("ul",[a("li",[t._v("纯二进制存储")]),t._v(" "),a("li",[t._v("31 位表示数值")]),t._v(" "),a("li",[t._v("数值范围可以加大")])])]),t._v(" "),a("li",[t._v("负数\n"),a("ul",[a("li",[t._v("二进制补码存储")]),t._v(" "),a("li",[t._v("补码的计算步骤\n"),a("ol",[a("li",[t._v("确定该数字的非负版本的二进制表示")]),t._v(" "),a("li",[t._v("求得二进制反码，即要把 0 替换为 1，把 1 替换为 0")]),t._v(" "),a("li",[t._v("在二进制反码上加 1")])])])])])])]),t._v(" "),a("li",[t._v("当作 0 来处理的特殊值\n"),a("ul",[a("li",[t._v("NaN")]),t._v(" "),a("li",[t._v("Infinity")])])])])]),t._v(" "),a("li",[t._v("逻辑位运算\n"),a("ul",[a("li",[t._v("返回值为 1\n"),a("ul",[a("li",[t._v("按位非~ 0")]),t._v(" "),a("li",[t._v("按位与& 对应值全为 1")]),t._v(" "),a("li",[t._v("按位或| 任何一位是 1")]),t._v(" "),a("li",[t._v("按位异或^ 既不同时为 0，也不同时为 1")])])]),t._v(" "),a("li",[t._v("返回值为 0\n"),a("ul",[a("li",[t._v("按位非~ 1")]),t._v(" "),a("li",[t._v("按位与& 任何一位是 0")]),t._v(" "),a("li",[t._v("按位或| 对应位全 0")]),t._v(" "),a("li",[t._v("按位异或^ 对应位全 0 或全 1")])])])])]),t._v(" "),a("li",[t._v("位移操作\n"),a("ul",[a("li",[t._v("左移<<\n"),a("ul",[a("li",[t._v("将数值的所有位左移指定的位数")]),t._v(" "),a("li",[t._v("所有空位用 0 补充")]),t._v(" "),a("li",[t._v("左移 1 位对其 X2，左移 2 位对其 X4；依次类推")])])]),t._v(" "),a("li",[t._v("有符号右移>>\n"),a("ul",[a("li",[t._v("将数值的所有位右移指定的位数")]),t._v(" "),a("li",[t._v("一处的位被舍弃")]),t._v(" "),a("li",[t._v("保留符号位")]),t._v(" "),a("li",[t._v("右移一位对齐除 2，右移两位对齐除 4，依次类推")])])]),t._v(" "),a("li",[t._v("无符号右移>>>\n"),a("ul",[a("li",[t._v("正数，与有符号右移结果相同")]),t._v(" "),a("li",[t._v("负数，会出现无限大的数值")])])])])]),t._v(" "),a("li",[t._v("复合赋值运算符：位操作符与等号结合，复合赋值不会有性能方面的提升")])]),t._v(" "),a("p",[a("strong",[a("code",[t._v("&")]),t._v("按位与、"),a("code",[t._v("|")]),t._v("按位或、"),a("code",[t._v("~")]),t._v("按位非、"),a("code",[t._v("^")]),t._v("按位异或、"),a("code",[t._v("<<")]),t._v("按位左移、"),a("code",[t._v(">>")]),t._v("按位右移")])]),t._v(" "),a("h2",{attrs:{id:"其他运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他运算符"}},[t._v("#")]),t._v(" 其他运算符")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("?:")]),t._v("条件运算符，也叫三元运算符/三目运算符\n"),a("ul",[a("li",[t._v("基本格式为："),a("code",[t._v("条件表达式 ? 表达式一 : 表达式二")])]),t._v(" "),a("li",[t._v("其中问号之前的表示判断的条件，如果这个条件为真，则执行问号后面的语句，如果判断条件不成立，则执行冒号后面的语句")]),t._v(" "),a("li",[t._v("简单的条件可以用三目运算符写")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' is true'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' is false'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null is false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined is false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0 is false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN is false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0 is false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false is false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// is false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// is true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object object] is true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// is true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trueOrFalse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 is true")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("typeof")]),t._v("：类型判定运算符")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'typeof num:'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typeof num: undefined")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'typeof Packt:'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaaaaa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typeof Packt: string")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'typeof true:'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typeof true: boolean")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'typeof [1,2,3]:'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typeof [1,2,3]: object")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'typeof {name:John}:'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sssss'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typeof {name:John}: object")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v(",")]),t._v("逗号，在一行语句中执行多个不同的操作，一般用于声明多个变量\n"),a("ul",[a("li",[t._v("忽略第一个操作符，返回第二个操作符")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("void")]),t._v("：舍弃运算数的值，返回"),a("code",[t._v("undefined")]),t._v("作为表达式的值")])]),t._v(" "),a("h2",{attrs:{id:"、-、-、-与-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#、-、-、-与-的区别"}},[t._v("#")]),t._v(" "),a("code",[t._v("=")]),t._v("、"),a("code",[t._v("==")]),t._v("、"),a("code",[t._v("===")]),t._v("、"),a("code",[t._v("!")]),t._v("与"),a("code",[t._v("!!")]),t._v("的区别")]),t._v(" "),a("h4",{attrs:{id:"、-、-三者的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#、-、-三者的区别"}},[t._v("#")]),t._v(" "),a("code",[t._v("=")]),t._v("、"),a("code",[t._v("==")]),t._v("、"),a("code",[t._v("===")]),t._v("三者的区别")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("=")]),t._v("：一个等号是赋值运算，把等号右边的值赋给左边的变量，是从右相左计算，并且运算优先级最低")]),t._v(" "),a("li",[a("code",[t._v("==")]),t._v("：两个等号是比较运算，会得到一个真/假的逻辑值，遇到左右两边是不同的数据类型，默认会进行数据类型转换")]),t._v(" "),a("li",[a("code",[t._v("===")]),t._v("：三个等号是全等比较，只有数据类型一样才有可比性，遇到左右两边数据类型不同时直接返回"),a("code",[t._v("false")]),t._v("，并不会像"),a("code",[t._v("==")]),t._v("一样进行数据类型转换")])]),t._v(" "),a("h4",{attrs:{id:"和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和"}},[t._v("#")]),t._v(" "),a("code",[t._v("!")]),t._v("和"),a("code",[t._v("!!")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("!")]),t._v(" 是取反的意思；先将其它的数据类型转换为布尔类型；然后在取反")]),t._v(" "),a("li",[a("code",[t._v("!!")]),t._v(" 是将其他的数据类型转换为布尔类型，相当于"),a("code",[t._v("Boolean()")]),t._v("方法")])]),t._v(" "),a("p",[t._v("记住前面说的哪些数据是真，哪些是假就可以了")]),t._v(" "),a("p",[a("code",[t._v("0 NaN '' null undefined")]),t._v(" 这些用都是"),a("code",[t._v("false")])]),t._v(" "),a("ul",[a("li",[t._v("如果操作数是一个对象，返回"),a("code",[t._v("false")])]),t._v(" "),a("li",[t._v("如果操作数是一个非空字符串，返回"),a("code",[t._v("false")])]),t._v(" "),a("li",[t._v("如果操作数是任意非 0 数值（包括 Infinity），返回"),a("code",[t._v("false")])]),t._v(" "),a("li",[t._v("如果操作数是一个空字符串，返回"),a("code",[t._v("true")])]),t._v(" "),a("li",[t._v("如果操作数是数值 0，返回"),a("code",[t._v("true")])]),t._v(" "),a("li",[t._v("如果操作数是"),a("code",[t._v("null")]),t._v("，返回"),a("code",[t._v("true")])]),t._v(" "),a("li",[t._v("如果操作数是"),a("code",[t._v("NaN")]),t._v("，返回"),a("code",[t._v("true")])]),t._v(" "),a("li",[t._v("如果操作数是"),a("code",[t._v("undefined")]),t._v("，返回"),a("code",[t._v("true")])])]),t._v(" "),a("h2",{attrs:{id:"运算符优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符优先级"}},[t._v("#")]),t._v(" 运算符优先级")]),t._v(" "),a("br"),t._v(" "),a("img",{attrs:{src:t.$withBase("/js-notes/表达式和运算符/运算符优先级.png")}})])}),[],!1,null,null,null);s.default=e.exports}}]);