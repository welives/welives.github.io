(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{402:function(t,s,n){"use strict";n.r(s);var a=n(25),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"数据类型初识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型初识"}},[t._v("#")]),t._v(" 数据类型初识")]),t._v(" "),n("p",[t._v("JS 的数据类型，通过 typeof 来检测，得到的数据类型有 "),n("code",[t._v("String")]),t._v("、"),n("code",[t._v("Number")]),t._v("、"),n("code",[t._v("Boolean")]),t._v("、"),n("code",[t._v("Null")]),t._v("、"),n("code",[t._v("Undefined")]),t._v("、"),n("code",[t._v("Object")]),t._v("、"),n("code",[t._v("Symbol")]),t._v(" (Object 是一切数据的基础)")]),t._v(" "),n("p",[t._v("ECMAScript 中有 6 种简单的数据类型，也称为基本数据类型"),n("code",[t._v("String")]),t._v("、"),n("code",[t._v("Number")]),t._v("、"),n("code",[t._v("Boolean")]),t._v("、"),n("code",[t._v("Null")]),t._v("、"),n("code",[t._v("Undefined")]),t._v("、"),n("code",[t._v("Symbol")])]),t._v(" "),n("p",[t._v("一种复杂数据类型，也称为引用数据类型"),n("code",[t._v("Object")]),t._v("(typeof 检测还有一种特殊的 Function)")]),t._v(" "),n("p",[n("code",[t._v("Object")]),t._v("本质是由一组无序的键值对组成的")]),t._v(" "),n("h4",{attrs:{id:"typeof-操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typeof-操作符"}},[t._v("#")]),t._v(" typeof 操作符")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" qqqq"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined，这个变量没有定义,但是不会报错；qqqq此时是变量；")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("222")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number，是一个数字； typeof是操作符而不是方法，所以后面可以加()也可以不加；")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'222'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string，是一个字符串")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// boolean，是一个布尔值")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object 是一个对象")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// objecy 是一个对象，在javascript里，null是一个空指针；")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function，是一个方法，也是属于object类型的；js里万物皆对象")]),t._v("\n")])])]),n("p",[t._v("从技术的角度上讲，函数在 ECMAScript 中是对象，不是一种数据类型，属于对象，这就是所谓的 "),n("strong",[t._v("JS 中万物皆对象")]),t._v("。但是，函数也确实有一些特殊的属性，因此通过"),n("code",[t._v("typeof")]),t._v("操作符来区分也是有必要的")]),t._v(" "),n("p",[n("code",[t._v("typeof")]),t._v("的返回值是一个字符串类型的数据")]),t._v(" "),n("p",[n("code",[t._v("typeof")]),t._v("检测任何数据，返回的都是一个字符串，"),n("strong",[t._v("两次和两次以上的连续"),n("code",[t._v("typeof")]),t._v("结果肯定都是"),n("code",[t._v("String")])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两次检测 结果是string")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'开始2次typeof'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" qqqq"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("222")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'222'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("strong",[t._v("变量和数据之间的关系和区别")]),t._v("：变量是数据的代言人，可以更方便快捷的操作数据")]),t._v(" "),n("h2",{attrs:{id:"string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),n("h4",{attrs:{id:"字符串的特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符串的特性"}},[t._v("#")]),t._v(" 字符串的特性")]),t._v(" "),n("ul",[n("li",[t._v("由 0 个或多个 16 位 unicode 字符组成")]),t._v(" "),n("li",[t._v("引号包裹，单引号和双引号都可以，但是单引号和双引号不能交叉使用（放在引号内的任何东西都是属于字符串，即使里面没有东西或者空格，都属于合法的字符串）")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str5 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function(){}'")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//上面都是合法的string类型")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" str1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" str2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" str3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" str4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" str5"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("ul",[n("li",[t._v("使用"),n("code",[t._v(".length")]),t._v("属性可以访问字符串的长度")])]),t._v(" "),n("p",[t._v("length 计算包括空格")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符串长度")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" strTest1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jandan'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 共6个")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" strTest2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'煎蛋的JavaScript学习笔记'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 共17")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strTest1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strTest2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 17")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这只是个简单的判断，如果想用JavaScript判断或者获取所占的字节，就不能这么判断了，因为中文和英文字符所占的字节长度不同，所以要想获得中文字符的真正长度，就需要对输入的字符进行判断或过滤(可以unicode区间进行判断)，如果符合中文字符，则使用不同的标准。")]),t._v("\n")])])]),n("ul",[n("li",[t._v("无法精确返回双字节字符长度(上面已经做说明)")]),t._v(" "),n("li",[t._v("转义序列表示一个字符")]),t._v(" "),n("li",[t._v("字符串一旦被创建，其值是不能改变的，若要改变必须销毁原有字符串，然后用另一个包含新值的字符串填充改变量")])]),t._v(" "),n("p",[n("strong",[t._v("转义序列")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("\\n")]),t._v(" 换行，常用的，这个需要记住")]),t._v(" "),n("li",[n("code",[t._v("\\")]),t._v(" 常在转义时使用的\n"),n("ul",[n("li",[n("code",[t._v("\\'")]),t._v(" 单引号，常用")]),t._v(" "),n("li",[n("code",[t._v('\\"')]),t._v(" 双引号，常用")])])])]),t._v(" "),n("p",[n("strong",[t._v("下面的仅作了解就可以了")])]),t._v(" "),n("ul",[n("li",[t._v("\\t 制表符")]),t._v(" "),n("li",[t._v("\\b 空格")]),t._v(" "),n("li",[t._v("\\r 回车符")]),t._v(" "),n("li",[t._v("\\f 分页符")]),t._v(" "),n("li",[t._v("\\xnn 十六进制，n 代表 0-F")]),t._v(" "),n("li",[t._v("\\unnnn 以十六进制代码表示一个 unicode 字符")])]),t._v(" "),n("h4",{attrs:{id:"类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("toString()")]),t._v("：把别的类型数据，转为字符串")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 适用类型")]),t._v("\nNumber "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" Boolean "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" String "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" Object\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数：number类型的数值基数；一般不需要写，仅作了解，如果需要按照2/8/16进制来转换，需要写；")]),t._v("\n")])])]),n("p",[t._v("toString() 和 String()")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" testNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testTarget1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testTarget2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" testNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 推荐用法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testTarget3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//var testTarget4=testNum.String() // 报错")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" testTarget1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" testTarget2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" testTarget3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string")]),t._v("\n")])])]),n("ul",[n("li",[n("strong",[t._v("String()")])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null和undefined没有toString方法，所以转换的时候用String()函数")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testNull "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" testNull"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//var testString2=testNull.toString() // 报错")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testString3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testNull"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" testString3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string")]),t._v("\n")])])]),n("ul",[n("li",[n("strong",[t._v("Eval()")]),t._v("：计算字符串表达式的值并以数值形式返回")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//eval")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" evalVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1+2+5+8+10'")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" evalVal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" evalComputed "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("evalVal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("evalComputed"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" evalComputed"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 26 "number"')]),t._v("\n")])])]),n("p",[t._v("如果要把某个数据转化为字符串，可以有一个快捷的方式，就是把它与一个空字符串"),n("code",[t._v('""')]),t._v("相加就可以了")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// +""用来转换字符串')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" numVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" boolVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nullVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" undefinedVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" numValPlus "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" numVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" boolValPlus "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" boolVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nullPlus "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nullVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" undefinedPlus "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" undefinedVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numValPlus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" numValPlus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("boolValPlus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" boolValPlus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullPlus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" nullPlus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("undefinedPlus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" undefinedPlus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("某个数据并不仅限于"),n("code",[t._v("Number")]),t._v("类型，数组也可以的，"),n("code",[t._v('console.log([1,2,3,4]+"") // 1,2,3,4')])]),t._v(" "),n("p",[t._v("再看一组的加法(将字符串转为数字,注意浮点数的运算精度)")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1.1'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.11.1")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1.1'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.2")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1.1'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.2")]),t._v("\n")])])]),n("h2",{attrs:{id:"number"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),n("p",[t._v("包含：正数、负数、零、小数、以及特殊的"),n("code",[t._v("NaN")])]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("进制")])]),t._v(" "),n("ul",[n("li",[t._v("十进制（最常用）")]),t._v(" "),n("li",[t._v("八进制（仅了解即可）\n"),n("ul",[n("li",[t._v("第一位必须是 0")]),t._v(" "),n("li",[t._v("有效序列 0-7（0 后面跟着由 0-7[包括 0-7]之间的数字组成的序列）")]),t._v(" "),n("li",[t._v("如果超出范围\n"),n("ul",[n("li",[t._v("前导位 0 被忽略")]),t._v(" "),n("li",[t._v("后续数值以十进制计数")])])])])]),t._v(" "),n("li",[t._v("十六进制（仅了解即可）\n"),n("ul",[n("li",[t._v("前两位必须 0x")]),t._v(" "),n("li",[t._v("有效序列\n"),n("ul",[n("li",[t._v("0-9")]),t._v(" "),n("li",[t._v("A-F")])])])])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("浮点数")])]),t._v(" "),n("ul",[n("li",[t._v("小数点后至少一位数字")]),t._v(" "),n("li",[t._v("可以用科学计算法\n"),n("ul",[n("li",[t._v("小数点后带有 6 个 0 的浮点数")]),t._v(" "),n("li",[t._v("以 e 为底*10 的正负 N 次幂")])])]),t._v(" "),n("li",[t._v("最高精度：17 位小数")]),t._v(" "),n("li",[t._v("缺点\n"),n("ul",[n("li",[t._v("存在舍入误差("),n("strong",[t._v("浮点数之间的运算也是非常不准确的，需要转成整数，然后再运算，运算后再转回对应的小数")]),t._v(")")]),t._v(" "),n("li",[t._v("无法测试特定浮点数值，不要直接对浮点数进行运算")]),t._v(" "),n("li",[t._v("在做有浮点数运算的情况下，先转成整数，然后得到结果后再转成小数")])])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" test1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0.30000000000000004")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" test2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.11")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.21")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0.032")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("数值范围")]),t._v("（仅作了解）")]),t._v(" "),n("ul",[n("li",[t._v("最小值 Number.MIN_VALUE")]),t._v(" "),n("li",[t._v("最大值 Number.MAX_VALUE")]),t._v(" "),n("li",[t._v("超出范围\n"),n("ul",[n("li",[t._v("正无穷\n"),n("ul",[n("li",[t._v("Infinity")]),t._v(" "),n("li",[t._v("Number.POSITIVE_INFINTY")])])]),t._v(" "),n("li",[t._v("负无穷\n"),n("ul",[n("li",[t._v("-Infinity")]),t._v(" "),n("li",[t._v("Number.NEGATIVE_INFINITY")])])]),t._v(" "),n("li",[t._v("缺陷\n"),n("ul",[n("li",[t._v("无法参与下一次计算")])])]),t._v(" "),n("li",[t._v("检测方法，用 isFinite\n"),n("ul",[n("li",[t._v("超出范围 false")]),t._v(" "),n("li",[t._v("合法范围 true")])])])])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("NaN")])]),t._v(" "),n("ul",[n("li",[t._v("含义\n"),n("ul",[n("li",[t._v("Not a Number")]),t._v(" "),n("li",[t._v("非数值,不是一个数值，但是 NaN 属于数值类型")])])]),t._v(" "),n("li",[t._v("特点\n"),n("ul",[n("li",[t._v("任何涉及 NaN 的操作都将返回 NaN")]),t._v(" "),n("li",[t._v("NaN 与任何数值都不相等包括其自身，"),n("code",[t._v("console.log(NaN==NaN) // false")])])])]),t._v(" "),n("li",[t._v("检测 isNaN\n"),n("ul",[n("li",[t._v("可以转换为数值，为 false")]),t._v(" "),n("li",[t._v("不能转换为数值，为 true")])])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("数值转换的三种方法")]),t._v("（五种方式）")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Number()")]),t._v(" 最霸道的转换方法，只要不是纯数值类型，全部不能成功转换")]),t._v(" "),n("li",[n("strong",[t._v("parseInt()")]),t._v(" 是上面 Number 的升级版本，有字符串出现也可能转换为数值，从前往后开始转，只要有一位可以转为数字都可以成功转换为数字。123sad 可以转为 123（备注：会忽略浮点号，遇到第一个非数值的符号后直接退出转换，其中"),n("code",[t._v(".")]),t._v("也是不合法的数值符号）")]),t._v(" "),n("li",[n("strong",[t._v("parseFloat()")]),t._v(" 是 parseInt 的升级版本，可以转换为浮点数，123.12dw 可以转换为 123.12")]),t._v(" "),n("li",[t._v('-0 比如"5"-0，这个方法也属于 Number()的，但是它属于隐式调用 Number 方法')]),t._v(" "),n("li",[t._v('+"52" 这种也可以转化为数字，使用单目加法运算符，也是可以将字符串转换为数字的(运算符那节会讲，现在仅作了解即可)')])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string, 1010")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string 1010")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number 20")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number 0")]),t._v("\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"类型转转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型转转"}},[t._v("#")]),t._v(" 类型转转")]),t._v(" "),n("h4",{attrs:{id:"number-数据类型的系统默认转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#number-数据类型的系统默认转换"}},[t._v("#")]),t._v(" Number()：数据类型的系统默认转换")]),t._v(" "),n("ul",[n("li",[t._v("Boolean 转换为数值的时候\n"),n("ul",[n("li",[t._v("true 转为 1")]),t._v(" "),n("li",[t._v("false 转为 0")])])]),t._v(" "),n("li",[t._v("null 转换为数值的时候 转换为 0")]),t._v(" "),n("li",[t._v("undefined 转换为数值的时候 转为 NaN")]),t._v(" "),n("li",[t._v("string 转换为数值的时候\n"),n("ul",[n("li",[t._v("如果只包含数字\n"),n("ul",[n("li",[t._v("转为十进制数")]),t._v(" "),n("li",[t._v("忽略前导 0")])])]),t._v(" "),n("li",[t._v("如果包含有效浮点格式\n"),n("ul",[n("li",[t._v("转为浮点数值")]),t._v(" "),n("li",[t._v("忽略前导 0")])])]),t._v(" "),n("li",[t._v("包含有效十六进制格式\n"),n("ul",[n("li",[t._v("转为相同大小的十六进制整数")])])]),t._v(" "),n("li",[t._v('空字符串转为 0；备注：""是空字符串 " "这个就不是空字符串了')]),t._v(" "),n("li",[t._v("其他格式字符串 NaN")])])]),t._v(" "),n("li",[t._v("Object 调用对象的 valueOf()方法，然后依照前面的规则转换返回的值，如果转换的结果是 NaN，则调用对应的 toString 方法，然后再次依照前面的规则转换返回的字符串值\n"),n("ul",[n("li",[t._v("valueOf()")]),t._v(" "),n("li",[t._v("toString()")])])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello word'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'000011'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 11")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),n("h4",{attrs:{id:"parseint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parseint"}},[t._v("#")]),t._v(" parseInt()")]),t._v(" "),n("ul",[n("li",[t._v("parseInt 特性\n"),n("ul",[n("li",[t._v("忽略前导空格")]),t._v(" "),n("li",[t._v("直接找到第一个非空格字符\n"),n("ul",[n("li",[t._v("不是数字字符或负号，退出，解析不出数字\n"),n("ul",[n("li",[t._v("小数点不是有效数字")])])]),t._v(" "),n("li",[t._v("如果第一个是数字字符\n"),n("ul",[n("li",[t._v("解析所有后续字符")]),t._v(" "),n("li",[t._v("遇到非数字字符结束")])])])])])])]),t._v(" "),n("li",[t._v("parseInt 参数\n"),n("ul",[n("li",[t._v("参数 1、要解析的字符串")]),t._v(" "),n("li",[t._v("参数 2、转换时所使用的基数，为了消除在使用 parentInt 函数时可能导致的格式，第二个参数可以指定要解析的基数，16 就是十六进制，一般不传第二个参数")])])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AF'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN,默认十进制解析的")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'AF'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 175")]),t._v("\n")])])]),n("h4",{attrs:{id:"parsefloat"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parsefloat"}},[t._v("#")]),t._v(" parseFloat()")]),t._v(" "),n("ul",[n("li",[t._v("从第一个字符开始解析")]),t._v(" "),n("li",[t._v("遇到无效浮点格式后结束")]),t._v(" "),n("li",[t._v("只有第一个小数点有效")]),t._v(" "),n("li",[t._v("忽略前导 0")]),t._v(" "),n("li",[t._v("十六进制始终为 0")]),t._v(" "),n("li",[t._v("没有小数点或小数点后全 0，转换为整数")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'564878.12415ssss'")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" min1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  min2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  min3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("min1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" min2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" min3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" targetMin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("min2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetMin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 9414秒")]),t._v("\n")])])]),n("h2",{attrs:{id:"boolean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[t._v("#")]),t._v(" Boolean")]),t._v(" "),n("ul",[n("li",[t._v("true 为真，false 为假（"),n("code",[t._v("false")]),t._v("是布尔值，而 "),n("code",[t._v("False")]),t._v("只是标识符；通常用在 if/else 的判断语句中（如果需要的话，通常还会配合"),n("code",[t._v("逻辑与&&")]),t._v("，"),n("code",[t._v("逻辑或||")]),t._v("来完成）")]),t._v(" "),n("li",[t._v("true 不一定等于 1，false 不一定等于 0")]),t._v(" "),n("li",[t._v("使用"),n("code",[t._v("Boolean()")]),t._v("进行转换，任何数据类型的值调用"),n("code",[t._v("Boolean()")]),t._v("函数，都会返回一个 Boolean 值；也可以用"),n("code",[t._v("!")]),t._v("或"),n("code",[t._v("!!")]),t._v("来转换\n"),n("ul",[n("li",[t._v("转为 true 的\n"),n("ul",[n("li",[t._v("Boolean 的 true 本身")]),t._v(" "),n("li",[t._v("任何非空字符串")]),t._v(" "),n("li",[t._v("任何非零数值")]),t._v(" "),n("li",[t._v("对象")])])]),t._v(" "),n("li",[t._v("转为 false 的\n"),n("ul",[n("li",[t._v("false 本身")]),t._v(" "),n("li",[t._v("空字符串")]),t._v(" "),n("li",[t._v("0 和 NaN（0 等于-0 吗？可以输出看一下，是等于的）"),n("code",[t._v("console.log(0 === -0) // true")])]),t._v(" "),n("li",[t._v("null 和 undefined")])])])])])]),t._v(" "),n("p",[n("strong",[t._v("为 false 值的是")]),t._v("：false 本身、空字符串、0、NaN、null、undefined，这些值要记住，很重要")]),t._v(" "),n("h4",{attrs:{id:"和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#和"}},[t._v("#")]),t._v(" ! 和 !!")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("!")]),t._v(" 是取反的意思，先将其它的数据类型转换为布尔类型，然后在取反")]),t._v(" "),n("li",[n("code",[t._v("!!")]),t._v(" 是将其他的数据类型转换为布尔类型，相当于"),n("code",[t._v("Boolean()")])])]),t._v(" "),n("p",[n("strong",[t._v("自身做布尔运算时候的转换")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("规律")]),t._v(" "),n("th",[t._v("示例")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Object")]),t._v(" "),n("td",[t._v("都是 true")]),t._v(" "),n("td",[t._v("!![]")])]),t._v(" "),n("tr",[n("td",[t._v("Number")]),t._v(" "),n("td",[t._v("只有 0 和 NaN 是 false")]),t._v(" "),n("td",[t._v("!!0")])]),t._v(" "),n("tr",[n("td",[t._v("String")]),t._v(" "),n("td",[t._v("只有空字符串是 false(不是空格字符串)")]),t._v(" "),n("td",[t._v("!!''")])]),t._v(" "),n("tr",[n("td",[t._v("Function")]),t._v(" "),n("td",[t._v("都是 true")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("null，undefined")]),t._v(" "),n("td",[t._v("都是 false")]),t._v(" "),n("td")])])]),t._v(" "),n("p",[n("strong",[t._v("总结：0、NaN、””、null、undefined、false 本身，只有这六个转换后是 false，其它都是 true")])]),t._v(" "),n("p",[n("strong",[t._v("数据类型和逻辑运算规律表")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类型 A")]),t._v(" "),n("th",[t._v("类型 B")]),t._v(" "),n("th",[t._v("比较时候的运算原理")]),t._v(" "),n("th",[t._v("示例")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("对象")]),t._v(" "),n("td",[t._v("对象")]),t._v(" "),n("td",[t._v("比较是不是同一个内存地址，肯定不相等")]),t._v(" "),n("td",[t._v("[]===[] false")])]),t._v(" "),n("tr",[n("td",[t._v("对象")]),t._v(" "),n("td",[t._v("字符串")]),t._v(" "),n("td",[t._v("对象先转化为字符串，然后做比较")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("对象")]),t._v(" "),n("td",[t._v("布尔类型")]),t._v(" "),n("td",[t._v("两边都要先转为数字(false 是 0，true 是 1)，对象类型先转隐式调用 toString 方法，然后再 Number()")]),t._v(" "),n("td",[t._v("[]==false，[]==0，[1]==1，[1]==true")])]),t._v(" "),n("tr",[n("td",[t._v("对象")]),t._v(" "),n("td",[t._v("数字")]),t._v(" "),n("td",[t._v("对象要转为数字，再进行比较(对象先隐式调用 toString 方法转换为字符串，然后再把这个字符串转化为数字，相当于字符串放到 number 这个方法中)")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("数字")]),t._v(" "),n("td",[t._v("布尔")]),t._v(" "),n("td",[t._v("是进行数字的比较，布尔转为数字")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("数字")]),t._v(" "),n("td",[t._v("字符串")]),t._v(" "),n("td",[t._v("两边都要转换为数字再进行比较")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("布尔")]),t._v(" "),n("td",[t._v("字符串")]),t._v(" "),n("td",[t._v("两边都要转为数字再进行比较")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("null")]),t._v(" "),n("td",[t._v("undefined")]),t._v(" "),n("td",[t._v("true，因为"),n("code",[t._v("undefined")]),t._v("派生自"),n("code",[t._v("null")])]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("null 或 undefined")]),t._v(" "),n("td",[t._v("其它所有类型")]),t._v(" "),n("td",[n("code",[t._v("null")]),t._v("和"),n("code",[t._v("undefined")]),t._v("和其他类型比较都是 false（这两个没有 toString 方法）")]),t._v(" "),n("td",[t._v("null==false，null==0，null==''")])])])]),t._v(" "),n("h2",{attrs:{id:"null-和-undefined"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[t._v("#")]),t._v(" null 和 undefined")]),t._v(" "),n("ul",[n("li",[t._v("Undefined 类型只有一个值，就是 undefined；Null 类型也只有一个值就是 null。它们的名称既是类型也是值")]),t._v(" "),n("li",[t._v("null 是空值，是一个空指针，一般表示一个变量定义了但是没有值（值为空），undefined 是未定义")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xxx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错 xxx is not defined")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" yyy\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("yyy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// yyy的值是 undefined")]),t._v("\n")])])]),n("p",[t._v("对象的属性不存在，也是 undefined")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  msg1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  mag2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("msg1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("msg3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),n("ul",[n("li",[n("code",[t._v("null")]),t._v("（空值，曾经赋过值，但是目前没有值）\n"),n("ul",[n("li",[t._v("逻辑上"),n("code",[t._v("null")]),t._v("表示一个空对象的指针")]),t._v(" "),n("li",[t._v("使用"),n("code",[t._v("typeof")]),t._v("检测的时候会返回 object（object 原型的终点也是 null）")])])]),t._v(" "),n("li",[n("code",[t._v("undefined")]),t._v("（没有值，指从没有赋过值）\n"),n("ul",[n("li",[t._v("使用"),n("code",[t._v("var")]),t._v("或"),n("code",[t._v("let")]),t._v("声明变量但没有初始化/赋值的")]),t._v(" "),n("li",[t._v("区分空对象指针与尚未定义的变量")]),t._v(" "),n("li",[t._v("对未初始化的变量以及未声明的变量使用"),n("code",[t._v("typeof")]),t._v("运算符均会返回 undefined")])])])]),t._v(" "),n("p",[t._v("在非严格模式和严格模式下，我们可以声明一个 undefined 的局部变量，因为 undefined 是一个标识符，可以当作变量来使用和赋值，但却不能声明一个 null 的局部变量，因为 null 是一个特殊关键字，并不是一个标识符。注意这是为了深入理解 null 和 undefined 的背后原理而挖出来的不同，请不要真的声明一个 undefined 的变量（这是一个非常不好的习惯，严格点的压缩工具，压缩时都不会给你通过的，直接给你抛 Error）")]),t._v(" "),n("ul",[n("li",[t._v("undefined 和 null 的关系\n"),n("ul",[n("li",[t._v("undefined 派生自 null。因为 undefined 派生自 null，所以 null 和 undefined 做比较的时候是 true，但是 null 和 undefined 和别的任何类型做比较时都不相等")])])]),t._v(" "),n("li",[t._v("因为 undefined 派生自 null，所以在使用"),n("code",[t._v("==")]),t._v("进行比较的时候会返回 true")]),t._v(" "),n("li",[t._v("没有必要将变量显示声明 undefined")]),t._v(" "),n("li",[t._v("声明非空对象对应将其赋值为 null，比如做定时器的时候用 "),n("code",[t._v("timer = null")]),t._v(" 来重置变量")])]),t._v(" "),n("blockquote",[n("p",[t._v("Undefined 类只有一个值，就是特殊的 undefine（大写的 Undefined 是代表 Undefined 类的意思，就好比人类和人的关系）")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" test1\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" test2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'undefined'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错 test3 is not defined")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v('Null 是第二个只有一个值的数据类型，这个特殊的值是 null，从逻辑上来看，null 值表示一个空对象指针，而这也正是 typeof 操作符检测 null 的时候，返回"object"的原因。只要意在保存对象的变量还没有真正保存对象，就应该明确的让变量赋值为 null 值，这不仅可以体现 null 作为空对象指针的惯例，而且也有助于进一步区分 null 和 undefined')])]),t._v(" "),n("h3",{attrs:{id:"区别和联系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#区别和联系"}},[t._v("#")]),t._v(" 区别和联系")]),t._v(" "),n("p",[t._v("Undefined 是 javascript 中的一大特点，是 javascript 独有的数据和数据类型(这个数据类型只有这一个值，就是 undefined，它的类型也是 Undefined)，既然它是 javascript 独有的一个数据类型，那它在 javascript 编程里必然有它的特点，所以本节也在重复说")]),t._v(" "),n("p",[t._v("在 javascript 里，null 和 undefined 都表示不存在的数据，并且 undefined 也是从 null 中继承而来的，那 null 是什么？undefined 又是什么？他们两个都有什么共性和区别呢？看下面描述")]),t._v(" "),n("ul",[n("li",[t._v("null 和 undefined 都是表示没有的，不存在的值，他们两个在进行逻辑转换时候都是 false，这两个值进行比较是 true\n"),n("ul",[n("li",[t._v("null 和 undefined 没有 toString 方法，所以 null 和 undefined 和其他类型数据比较都是 false")]),t._v(" "),n("li",[t._v("因为 undefined 派生自 null，所以 undefined 和 null 做数据类型比较的时候的是 true")])])]),t._v(" "),n("li",[t._v("null 表示空引用，它是 object 类型，undefined 表示未定义，它是 undefined 类型")]),t._v(" "),n("li",[t._v("null 是 object 类型，但不是 object 的实例，用"),n("code",[t._v("instanceof")]),t._v("判断结果为 false")]),t._v(" "),n("li",[t._v("如果一个变量的值是 null，那么必须主动的给它赋值 null")]),t._v(" "),n("li",[t._v("一个变量未定义，或者变量定义了但未赋值，则是 undefined\n"),n("ul",[n("li",[t._v("需要注意的是，一个变量如果没有定义，是不能直接在程序里使用的（就是不能直接读取，但可以赋值）。比如说，本来没有定义一个叫 a 的变量，但是我去 console.log(a)，在浏览器里这个语法会报错的，但是可以用"),n("code",[t._v("typeof")]),t._v("去运算；但是如果 a 定义了，但没有赋值，可以读，它的值就是 undefined，表示这个变量没有被赋值")])])]),t._v(" "),n("li",[t._v("对于属性来说，如果原来没有这个属性，根本就不存在这个属性，那么它的值就是 undefined\n"),n("ul",[n("li",[t._v("对象的属性不需要定义，如果不存在也可以直接去读，不会报错，而会给一个 undefined 的值")])])]),t._v(" "),n("li",[t._v("如果这个对象以后要用，但是现在还没有值，一般情况下，会给他一个 null 的值（如果在处理数据的时候，临时创建了一个变量，逻辑运算后，这个变量没有用了，也推荐把这个对象置为 null，比如做定时器的时候）")]),t._v(" "),n("li",[t._v("在函数(方法)里，如果必须返回值，但是值又计算不出来，那就返回一个 null（这是规范，而不是语法规定，JS 里遵循这个规范）\n"),n("ul",[n("li",[t._v("比如网页中没有 ID 是 div1 的元素，则下面的这句脚本返回 null")]),t._v(" "),n("li",[n("code",[t._v("document.getElementById('div1') // 返回 null")])]),t._v(" "),n("li",[t._v("但是没有返回值的函数，它的返回值都是 undefined")])])])]),t._v(" "),n("h4",{attrs:{id:"白话文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#白话文"}},[t._v("#")]),t._v(" 白话文")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("null")]),t._v("：你有一个种树的想法，圈一块地，说你要在这里种树")]),t._v(" "),n("li",[n("strong",[t._v("undefined")]),t._v("：你有一个种树的想法，圈一块地，说你要在这里种树，同时你还挖了一个坑准备种树（仅仅是挖坑，也还没有种树）")])]),t._v(" "),n("h2",{attrs:{id:"object"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[t._v("#")]),t._v(" Object")]),t._v(" "),n("p",[t._v("Object 类型包括，数组、正则等等")]),t._v(" "),n("ul",[n("li",[t._v("定义：一组数据或功能的集合")]),t._v(" "),n("li",[t._v("声明\n"),n("ul",[n("li",[n("code",[t._v("var o=new Object() //Object 后面的()可以省略，但不推荐")])]),t._v(" "),n("li",[n("code",[t._v("var o={}")])])])]),t._v(" "),n("li",[t._v("属性和方法\n"),n("ul",[n("li",[n("code",[t._v("constructor")]),t._v(" 保存用于创建当前对象的函数，构造函数就是 Object()")]),t._v(" "),n("li",[n("code",[t._v("hasOwnProperty(propertyName)")]),t._v(" 检测给定输入在当前对象实例中是否存在（而不是实例的原型中）")]),t._v(" "),n("li",[n("code",[t._v("isPrototypeOf(object)")]),t._v(" 检测传入的对象是否是另一个对象的原型（而不是在实例中）")]),t._v(" "),n("li",[n("code",[t._v("propertyIsEnumerable(propertyName)")]),t._v(" 检测给定属性是否能用"),n("code",[t._v("for-in")]),t._v("语句每句来枚举")]),t._v(" "),n("li",[n("code",[t._v("toLocaleString()")]),t._v(" 返回对象的字符串表示，该字符串与执行环境的地区对应")]),t._v(" "),n("li",[n("code",[t._v("toString()")]),t._v(" 返回对象的字符串表示")]),t._v(" "),n("li",[n("code",[t._v("valueOf()")]),t._v(" 返回对象的字符串，数值或布尔值表示；通常与"),n("code",[t._v("toString()")]),t._v("的值相同")]),t._v(" "),n("li",[t._v("在 ECMAScript 中，"),n("code",[t._v("Object")]),t._v("是所有对象的基础，因此所有对象都具有这些基本的属性和方法，方法的具体原理，后面数据类型和原型链中具体说")]),t._v(" "),n("li",[t._v("BOM 和 DOM 中的对象，都是属于宿主对象，因为他们是由宿主实现提供和定义的，但是 ECMAScript 不负责定义宿主对象，因此宿主对象可能会也可能不会继承"),n("code",[t._v("Object")])])])])]),t._v(" "),n("h2",{attrs:{id:"symbol"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[t._v("#")]),t._v(" Symbol")]),t._v(" "),n("p",[n("code",[t._v("Symbol")]),t._v("是 JavaScript 的原始数据类型，"),n("code",[t._v("Symbol")]),t._v("实例是唯一且不可改变的，可以作为对象属性的标识符使用")]),t._v(" "),n("p",[t._v("在没有 ES6 的时候，属性名是很容易被覆盖的。"),n("strong",[t._v("比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突")])]),t._v(" "),n("h4",{attrs:{id:"为了从根本上防止属性名的冲突-就是-es6-引入-symbol-的原因"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为了从根本上防止属性名的冲突-就是-es6-引入-symbol-的原因"}},[t._v("#")]),t._v(" 为了从根本上防止属性名的冲突，就是 ES6 引入 Symbol 的原因")]),t._v(" "),n("p",[t._v("在其他编程语言中"),n("code",[t._v("Symbol")]),t._v("也被称为原子(atoms)")]),t._v(" "),n("p",[t._v("在 JavaScript 中，"),n("code",[t._v("Symbol")]),t._v("是"),n("strong",[t._v("基本数据类型")]),t._v("的一种，"),n("code",[t._v("Symbol")]),t._v("对象是"),n("code",[t._v("Symbol")]),t._v("原始值的封装，"),n("code",[t._v("Symbol")]),t._v("类型是 ECMAScript 6 (es6) 中新添加的特性，在 ECMAScript 5 中没有对应的类型")]),t._v(" "),n("p",[n("code",[t._v("Symbol")]),t._v("值通过"),n("code",[t._v("Symbol")]),t._v("函数生成。这就是说，对象的属性名现在可以有两种类型")]),t._v(" "),n("ul",[n("li",[t._v("一是原来就有的字符串")]),t._v(" "),n("li",[t._v("二是新增的"),n("code",[t._v("Symbol")]),t._v("类型，凡是属性名属于"),n("code",[t._v("Symbol")]),t._v("类型，就都是独一无二的，可以保证不会与其他属性名产生冲突")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" aloneVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意不要用new来生成new")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" aloneVal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// symbol")]),t._v("\n")])])]),n("p",[n("strong",[t._v("注意不要用 new 来生成 new")]),t._v("。即时在 ES5 中，除了使用自己定义构造函数外，也不推荐加 new，因为历史遗留原因，ES6 中 new 创建 string 也支持，但不推荐这么用")]),t._v(" "),n("p",[n("code",[t._v("Symbol")]),t._v("函数前不能使用"),n("code",[t._v("new")]),t._v("命令，是因为生成的"),n("code",[t._v("Symbol")]),t._v("是一个原始类型的值，不是对象。也就是说，由于 "),n("code",[t._v("Symbol")]),t._v("值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型")]),t._v(" "),n("p",[n("code",[t._v("Symbol")]),t._v("里面的参数，是描述使用的，仅仅是为了控制输出时候方便识别，没有别的用途了")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" s1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" s2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Symbol(foo) Symbol(bar)")]),t._v("\n")])])]),n("p",[t._v("如果不加参数，它们在控制台的输出都是"),n("code",[t._v("Symbol()")]),t._v("，不利于区分，有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值")]),t._v(" "),n("h4",{attrs:{id:"注意-symbol-函数的参数只是表示对当前-symbol-值的描述-因此相同参数的-symbol-函数的返回值是不相等的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意-symbol-函数的参数只是表示对当前-symbol-值的描述-因此相同参数的-symbol-函数的返回值是不相等的"}},[t._v("#")]),t._v(" 注意，Symbol 函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的 Symbol 函数的返回值是不相等的")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 和NaN一样，连自己都不等于自己，因为里面的参数只是一个描述")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bar "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" symbolVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" bar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// symbol symbol")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" foo "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'symbol'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" bar "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'symbol'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" bar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 当然如果用变量储存，俩个变量是相等的，但这并不说明2个相同Symbol值是相同的")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("symbolVal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Symbol(11)")]),t._v("\n")])])]),n("h4",{attrs:{id:"symbol-不可以进行运算-不能转为数值-但是可以转换为字符串和布尔值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#symbol-不可以进行运算-不能转为数值-但是可以转换为字符串和布尔值"}},[t._v("#")]),t._v(" Symbol 不可以进行运算，不能转为数值，但是可以转换为字符串和布尔值")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" flag "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'flag'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(flag + '') // 报错, 不能运算")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'one'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'two'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Symbol(flag)one Symbol(flag)two")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 'boolean'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(Number(flag)) // 报错, 不能转为数值")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);