(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{399:function(t,a,s){"use strict";s.r(a);var n=s(25),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("在 javascript 里 声明变量简写为"),s("code",[t._v("var")]),t._v("和"),s("code",[t._v("let")]),t._v("。通过"),s("code",[t._v("var name")]),t._v("或"),s("code",[t._v("let name")]),t._v("就可以声明一个变量了，注意变量的声明和定义是两回事")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//变量的声明")]),t._v("\nname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'煎蛋'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//变量的定义")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'煎蛋'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//变量的声明加定义")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v('var name="煎蛋"，其实是实现两步：第一步'),s("code",[t._v("var name")]),t._v("，先声明一个"),s("code",[t._v("name")]),t._v("的变量；第二步"),s("code",[t._v('name="煎蛋"')]),t._v("，创建数据"),s("code",[t._v('"煎蛋"')]),t._v("这个字符串，并且把字符串"),s("code",[t._v('"煎蛋"')]),t._v("这条数据赋值给"),s("code",[t._v("name")]),t._v("这个变量，在定义(赋值)变量的"),s("code",[t._v("name")]),t._v("值")]),t._v(" "),s("p",[t._v("这个时候"),s("code",[t._v("name")]),t._v("的类型就是所代表值的类型，可以通过"),s("code",[t._v("typeof")]),t._v("来检测，通过检测可以知道这个变量所代表的值是一个字符串类型的数据")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'煎蛋'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  gender\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//煎蛋 string")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gender"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" gender"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//undefined "undefined"')]),t._v("\n")])])]),s("p",[t._v("虽然关键字"),s("code",[t._v("var")]),t._v("不是必须的，但是最好每次声明一个新变量都加上")]),t._v(" "),s("p",[t._v("需要注意的是变量本身是没有意义的，只是数据的媒介(代号)，我们说的变量默认是这个变量名所代表的数据，并不是这个变量名本身；这点需要注意的")]),t._v(" "),s("p",[t._v('类似我们的名字，"特斯拉"这三个字没有特殊意义，当这三个字与汽车品牌，或者一位科学家关联在一起的时候，这三个字才是有有意义的')]),t._v(" "),s("h2",{attrs:{id:"变量的命名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的命名"}},[t._v("#")]),t._v(" 变量的命名")]),t._v(" "),s("p",[t._v("变量的名字可以千变万化，但是也有其中的规则需要遵守（必须遵守的）")]),t._v(" "),s("ol",[s("li",[t._v("变量名是由数字、字母、下划线组成的，其中字母里大小写字母均可")]),t._v(" "),s("li",[t._v("变量名首位不是能数字，可以是字母下划线，首位后的位置可以是数字，字母，下划线")]),t._v(" "),s("li",[t._v("不能使用关键字和保留字作为变量的名字(需要避开的名字)\n"),s("ul",[s("li",[t._v("关于关键字和保留字，这个可以拿生活中的现象举例子，大人给小孩起名字的时候，小孩的名字一定不能和他父亲母亲的名字一样，当然也不能和爷爷，奶奶，外公，外婆，舅舅，姑姑等等这些名字一样，这个就是现实中约定俗成的规则")]),t._v(" "),s("li",[t._v("在 JS 中，也有些单词是有特殊意义的，或者是为了以后语言升级做准备的，而这些单词就不能作为变量名，比如前面接触的"),s("code",[t._v("typeof")]),t._v("、"),s("code",[t._v("function")]),t._v("，这样的单词就不能作为变量名")])])]),t._v(" "),s("li",[t._v("变量区分大小写，test 和 Test 是不一样的，必须严格一样，才算是同一个变量")])]),t._v(" "),s("h4",{attrs:{id:"变量命名的优化方法-推荐遵守的-非强制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量命名的优化方法-推荐遵守的-非强制"}},[t._v("#")]),t._v(" 变量命名的优化方法（推荐遵守的，非强制）")]),t._v(" "),s("p",[t._v("使用变量作为值的符号名，变量的名字又叫标识符")]),t._v(" "),s("p",[t._v("优雅的变量命名方法是可以一眼扫过就知道什么意思的；不会浪费时间在思考变量名所代表的意义")]),t._v(" "),s("p",[t._v('如果给"门"命名为 name1，给"桌子"命名为 name2，给"冰箱"命名为 name3，那么日常生活就乱套了，听起来这种在现实生活中会很奇怪和搞笑')]),t._v(" "),s("p",[t._v("但是很多前端新手经常犯变量命名的类似毛病")]),t._v(" "),s("p",[t._v("变量命名的意义是直观易理解，读到第一行代码时候就知道什么意思，假如隔了几十上百行代码后仍然可以明确他的意义")]),t._v(" "),s("p",[t._v("下面是收集的一些变量命名方法")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("-")]),t._v(" 连接符方法\n"),s("ul",[s("li",[t._v("比如给我桌子上门钥匙命名："),s("code",[t._v("my-room-door-key")]),t._v(" 和 "),s("code",[t._v("my_room_door_key")])]),t._v(" "),s("li",[t._v("这种方法用"),s("code",[t._v("-")]),t._v("和下划线"),s("code",[t._v("_")]),t._v("连接符来连接单词，"),s("strong",[t._v("区别是下划线在选择变量的时候，鼠标双击可以全部选择")])])])]),t._v(" "),s("li",[t._v("驼峰命名法，这种命名方法有两种方式\n"),s("ul",[s("li",[t._v("大驼峰：每个单词的首字母大写："),s("code",[t._v("MyRoomDoorKey")])]),t._v(" "),s("li",[t._v("小驼峰：第一个字母小写，其它单词首字母大写："),s("code",[t._v("myRoomDoorKey")])])])]),t._v(" "),s("li",[t._v("匈牙利命名法，变量由类型+对象描述组成\n"),s("ul",[s("li",[t._v("对象（Object）用 o 表示")]),t._v(" "),s("li",[t._v("函数（function）用 fn 表示")]),t._v(" "),s("li",[t._v("数组（array）用 a 表示")])])])]),t._v(" "),s("p",[t._v("上面的几种方法是目前最流行的规范，但是各有利弊，下面是我个人自己的书写习惯")]),t._v(" "),s("p",[t._v("我个人的写法")]),t._v(" "),s("ul",[s("li",[t._v("class 名：用"),s("code",[t._v("-")]),t._v("连接符的方法，"),s("code",[t._v('class="header-nav"')]),t._v(" 比如这样的")]),t._v(" "),s("li",[t._v("JS 变量名："),s("code",[t._v("myRoomDoorKey")]),t._v("，小驼峰")]),t._v(" "),s("li",[s("code",[t._v("data-diy_attr")]),t._v(" 自定义属性")]),t._v(" "),s("li",[s("code",[t._v("j-trigger-target")]),t._v(" JS 中需要用的类名")]),t._v(" "),s("li",[t._v("jQuery 对象名："),s("code",[t._v("$myKey")]),t._v("，小驼峰前面加"),s("code",[t._v("$")]),t._v("，这种方法是从匈牙利+驼驼峰总结出来的。其实真实项目中，很少有匈牙利命名法的，匈牙利命名法见过最多的都是出现在写 DEMO 的时候用")]),t._v(" "),s("li",[t._v("除非特别难起的变量名，否则不要用中文拼音做变量名，但是遇到难起的变量名，使用中文也别有负担，但是禁止中英文混搭")]),t._v(" "),s("li",[t._v("注释可以辅助整理思路")])]),t._v(" "),s("p",[t._v("不要听信某些教材和视频中说的严禁用拼音命名的话，有的甚至还把 linux 创始人林纳斯的代码风范拿出来说事，其实那些并没有什么卵用。开始就和大家说了变量是用来区别不同数据的，而优化变量名的意义在于能够快速识别这个变量名所代表的数据")]),t._v(" "),s("p",[t._v("比如你要记录游戏场景下的角色出血值，你还要想半天单词，或者找翻译，然后起出来的变量名，自己下次看到或者别人看到的时候还要去翻译或者思考下。这种情况下，为什么不直接用 chuxue 这种的方式呢？只需要后面加一行注视说明什么意思就可以了")]),t._v(" "),s("p",[t._v("很反感为了遵守优化规则而脱裤子放屁的方式的。曾经在项目中遇到过一个真实的事，某个变量看了半天不知道到底代表什么意思（因为当时有接触到差不多 10 种的用户相关类型的金额数），查了翻译也没有查到，后来问了下，才知道那个坑货把单词给拼错了两个字母")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("page-var-demo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("page-var-demo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\x3c!--class="page-var-demo"用来设置样式；id="page-var-demo"用给JS用；--\x3e')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("btns-group"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("javascript:;"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxxx xxxxx j-open-demo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("data-demo_id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("456465465"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("打开演示窗口"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--j-open-demo 这些是给JS用来触发某些事件用的，data-demo_id用来储存需要的值的--\x3e")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("javascript:;"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxxx xxxxx j-set-demo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("设置演示数据"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h2",{attrs:{id:"变量的声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的声明"}},[t._v("#")]),t._v(" 变量的声明")]),t._v(" "),s("p",[t._v("变量通过"),s("code",[t._v("var")]),t._v("或"),s("code",[t._v("let")]),t._v("来声明")]),t._v(" "),s("p",[t._v("下面是要避免的，否则写代码的时候可能会把自己给坑了")]),t._v(" "),s("ul",[s("li",[t._v("重复声明")]),t._v(" "),s("li",[t._v("不声明直接赋值")]),t._v(" "),s("li",[t._v("不要更改变量的类型，开始是字符串类型，后面就不要改为数值或别的了，开始如果用来储存某个属性值，就不要再用在别的属性上了")])]),t._v(" "),s("blockquote",[s("p",[t._v("推荐：先声明，后定义")])]),t._v(" "),s("ul",[s("li",[t._v("需要读写的变量，读写前，一定要声明")]),t._v(" "),s("li",[t._v("需要运算的变量，运算前，一定要赋值")]),t._v(" "),s("li",[t._v("书写的时候，推荐把变量名放在页面的上面（上部分）去声明+定义，这样不仅可以放心大胆的用，而且可以方便查找变量")]),t._v(" "),s("li",[t._v("在任何情况下声明变量都要用"),s("code",[t._v("var")]),t._v("或"),s("code",[t._v("let")]),t._v("先声明，在使用一个变量之前应当先声明，变量是使用关键字"),s("code",[t._v("var")]),t._v("或"),s("code",[t._v("let")]),t._v("来声明的")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这时候会隐式声明全局变量；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上面是非常不好的写法，不要写 "),s("code",[t._v("var b=c=2")]),t._v(" 这种声明，上面代码中 c 就会被隐式声明为全局变量")]),t._v(" "),s("p",[t._v("下面这种写法是可以的")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  c\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("因为开始 c 已经声明了，后面只是给 c 赋值")]),t._v(" "),s("p",[t._v("多个变量声明赋值时候，同一类的变量推荐下面这种写法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jandan'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  sex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),t._v("\n")])])]),s("p",[t._v("这样既可以简洁，又保证可读性")]),t._v(" "),s("p",[s("strong",[t._v("注意：任何变量赋值前都需要声明变量，不要隐式创建全局变量")])]),t._v(" "),s("h4",{attrs:{id:"重复声明和遗漏声明的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重复声明和遗漏声明的区别"}},[t._v("#")]),t._v(" 重复声明和遗漏声明的区别")]),t._v(" "),s("p",[t._v("在 javascript 里使用"),s("code",[t._v("var")]),t._v("重复声明是合法而且不会有任何事情的，如果重复声明带有初始化的值，那么就和一条简单的赋值语句没有什么两样，但是如果你忘记声明了，试图读取一个没有声明的变量的值，javascript 可能会报错")]),t._v(" "),s("p",[t._v("在严格模式中，给一个没有声明的变量赋值也是会报错的，非严格模式下虽然不会报错，但是不要抱着侥幸的心理，这是一个不好的习惯，建议始终使用"),s("code",[t._v("var")]),t._v("或"),s("code",[t._v("let")]),t._v("来声明变量")]),t._v(" "),s("p",[t._v("ES6 扩展了 2 种声明方法")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("let")]),t._v(" "),s("ul",[s("li",[t._v("声明一个块作用域的局部变量，可以选择将其初始化为一个值")])])]),t._v(" "),s("li",[s("strong",[t._v("const")]),t._v(" "),s("ul",[s("li",[t._v("声明一个只读的常量")])])])]),t._v(" "),s("p",[t._v("使用关键词"),s("code",[t._v("var")]),t._v("，例如 "),s("code",[t._v("var x = 42")]),t._v(" 这个语法可以用来声明局部变量和全局变量")]),t._v(" "),s("p",[t._v("使用关键词"),s("code",[t._v("let")]),t._v("，例如 "),s("code",[t._v("let y = 13")]),t._v(" 这个语法可以用来声明块作用域的局部变量，ES6 中更推荐用这个来声明变量")]),t._v(" "),s("p",[t._v("用"),s("code",[t._v("var")]),t._v("或"),s("code",[t._v("let")]),t._v("声明的且未赋初值的变量，值会被设定为"),s("code",[t._v("undefined")]),t._v("，"),s("code",[t._v("undefined")]),t._v("值在布尔类型环境中会被当作 false。所以程序中，利用数据的 true 和 false 判断逻辑也是常见的")]),t._v(" "),s("p",[t._v("常量不可以通过赋值改变其值，也不可以在脚本运行时重新声明，它必须被初始化为某个值")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jack'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// myName=4 //Error")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("常量的作用域规则与"),s("code",[t._v("let")]),t._v("块级作用域变量相同，若省略"),s("code",[t._v("const")]),t._v("关键字，则该标识符将被视为变量")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错, b is not defined")]),t._v("\n")])])]),s("p",[t._v("在同一作用域中，不能使用与变量名或函数名相同的名字来命名常量")]),t._v(" "),s("h2",{attrs:{id:"变量的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的类型"}},[t._v("#")]),t._v(" 变量的类型")]),t._v(" "),s("p",[t._v("变量分为值类型和引用类型："),s("code",[t._v("typeof")]),t._v("可以简单的检测数据类型")]),t._v(" "),s("p",[s("strong",[t._v("值类型的特点")])]),t._v(" "),s("ul",[s("li",[t._v("占用空间固定，保存在栈中")]),t._v(" "),s("li",[t._v("保存与复制都是值本身")]),t._v(" "),s("li",[t._v("使用"),s("code",[t._v("typeof")]),t._v("检测数据的类型")]),t._v(" "),s("li",[s("strong",[t._v("基本数据类型是值类型")])])]),t._v(" "),s("p",[s("strong",[t._v("引用类型的特点")])]),t._v(" "),s("ul",[s("li",[t._v("占用空间不固定，保存在堆中")]),t._v(" "),s("li",[t._v("保存与复制的是指向对象的一个指针")]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v("instanceof")]),t._v(" 检测数据的类型")]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v("new()")]),t._v(" 方法构造出的对象是引用型")])]),t._v(" "),s("h4",{attrs:{id:"基本数据类型和引用数据类型详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型和引用数据类型详解"}},[t._v("#")]),t._v(" 基本数据类型和引用数据类型详解")]),t._v(" "),s("p",[t._v("ECMAScript 规定变量包含两种不同数据类型的值，基本类型值和引用类型值")]),t._v(" "),s("p",[t._v("在给变量赋值的时候，解析器必须要明确这个值是基本类型还是引用类型值，因为他们的赋值方式是不同的")]),t._v(" "),s("p",[s("code",[t._v("string")]),t._v("、"),s("code",[t._v("number")]),t._v("、"),s("code",[t._v("boolean")]),t._v("、"),s("code",[t._v("null")]),t._v("、"),s("code",[t._v("undefined")]),t._v("、"),s("code",[t._v("symbol")]),t._v(" 都是基本数据类型，因此可以操作保存在变量中是实际值，此时变量储存的是实际的值")]),t._v(" "),s("p",[t._v("而引用类型的值是保存在内存中的，此时变量储存的是内存的地址，而不是真实的值；而我们操作引用类型的变量时，实际操作的是它引用地址对应的对象，而不是直接操作对象的")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  number2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number1\nnumber1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 改变了number1的值")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" number2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lu'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1\nobj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jandan'")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// jandan,jandan")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("p",[t._v("基本数据类型，也叫原始数据类型；引用数据类型，也叫对象类型和可变类型")]),t._v(" "),s("p",[s("strong",[t._v("不可变的意思是")]),t._v("：这个值是不可以改变的，如果变量修改了字符串，以前的字符串会销毁，然后再次赋值")]),t._v(" "),s("p",[s("strong",[t._v("可变的意思是")]),t._v("：可以改变对象的属性值，这只是对数据来说的，javascript 本身是可以自由进行数据类型转换的，javascript 的变量是无任何类型的，只是一个标识符，变量可以赋值任何类型的值")]),t._v(" "),s("p",[s("code",[t._v("String")]),t._v("的所有方法，都是不会改变原有字符串的，比如"),s("code",[t._v("toUpperCase")]),t._v("返回的值，其实是一个新字符串，原有字符串不变，这就是"),s("code",[t._v("String")]),t._v("方法的原理")]),t._v(" "),s("h2",{attrs:{id:"全局变量和局部变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局变量和局部变量"}},[t._v("#")]),t._v(" 全局变量和局部变量")]),t._v(" "),s("p",[s("strong",[t._v("全局变量")]),t._v("，有两种方式可以产生全局变量")]),t._v(" "),s("ul",[s("li",[t._v("在函数体外定义的变量")]),t._v(" "),s("li",[t._v("在函数体内部定义的无"),s("code",[t._v("var")]),t._v("的变量")]),t._v(" "),s("li",[t._v("上面两个说法都不算准确，但是可以先这么记着，后面学习作用域的时候，会仔细分析")])]),t._v(" "),s("p",[t._v("全局变量的用法：在任何位置都可以调用")]),t._v(" "),s("ul",[s("li",[t._v("直接调用变量名（不含有同名局部变量和参数时）")]),t._v(" "),s("li",[t._v("通过 "),s("code",[t._v("window.varName")]),t._v(" 来调用（浏览器环境中）")])]),t._v(" "),s("p",[s("strong",[t._v("局部变量")]),t._v("，局部变量有两种类型")]),t._v(" "),s("ul",[s("li",[t._v("在函数内部使用"),s("code",[t._v("var")]),t._v("声明的变量")]),t._v(" "),s("li",[t._v("函数的参数变量")])]),t._v(" "),s("p",[t._v("局部变量的调用方法")]),t._v(" "),s("ul",[s("li",[t._v("当前函数体内部")])]),t._v(" "),s("blockquote",[s("p",[t._v("扩展：在函数体外部不能调用函数体内部的数据，属于闭包的机制，后面会有介绍")])]),t._v(" "),s("p",[t._v("变量名的优先级（当有多个名字重复的变量时候）")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("局部变量 > 同名参数变量 > 同名全局变量")])])]),t._v(" "),s("p",[t._v("全部变量和局部变量的特性：")]),t._v(" "),s("ul",[s("li",[t._v("忽略块级作用域")]),t._v(" "),s("li",[t._v("全局变量是全局对象的属性")]),t._v(" "),s("li",[t._v("局部变量是调用对象的属性")]),t._v(" "),s("li",[t._v("作用域链\n"),s("ul",[s("li",[t._v("内层函数可访问外层函数局部变量")]),t._v(" "),s("li",[t._v("外层函数不能访问内层函数局部变量")])])]),t._v(" "),s("li",[t._v("生命周期\n"),s("ul",[s("li",[t._v("全局变量：除非被显式删除，否则一直存在")]),t._v(" "),s("li",[t._v("局部变量：自声明起至函数运行完毕或被显式删除")]),t._v(" "),s("li",[t._v("回收机制\n"),s("ul",[s("li",[t._v("标记清除")]),t._v(" "),s("li",[t._v("引用计数")])])])])])]),t._v(" "),s("h2",{attrs:{id:"注释和语法建议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释和语法建议"}},[t._v("#")]),t._v(" 注释和语法建议")]),t._v(" "),s("h4",{attrs:{id:"注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注释文字")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n * 多行注释1\n * 多行注释2\n */")]),t._v("\n")])])]),s("h4",{attrs:{id:"语法建议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法建议"}},[t._v("#")]),t._v(" 语法建议")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//bad\nvar a = 2\n/*\n * 没有分号，也是可以的，但是不推荐这么做；压缩的时候可能会出错\n * 理论上加分号性能会更好，浏览器不必花时间判断是否要加分号了\n * 无论加不加分号，浏览器解析的时候会判断的，如果需要加的地方没有加，浏览器解析时候会加上去之后再解析\n */\n\n//good\nvar b = 3;\n")])])]),s("h4",{attrs:{id:"不建议使用-var-a-b-c-1-这种的写法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不建议使用-var-a-b-c-1-这种的写法"}},[t._v("#")]),t._v(" 不建议使用 "),s("code",[t._v("var a=b=c=1")]),t._v(" 这种的写法")]),t._v(" "),s("p",[t._v("if-else 推荐加上{}")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//bad")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bad'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//有效，但是容易出错，不要使用；")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//good")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'good'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//推荐使用,可以降低修改代码时出错的几率，可以让代码的意图更明确；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("分号很多地方是可选的，推荐除了{}外都给加上。语句也可以换行的，但是有两个例外不能换行")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("return")]),t._v("、"),s("code",[t._v("break")]),t._v("、"),s("code",[t._v("continue")])]),t._v(" "),s("li",[s("code",[t._v("++")]),t._v(","),s("code",[t._v("--")]),t._v("运算符的时候")])])])}),[],!1,null,null,null);a.default=e.exports}}]);